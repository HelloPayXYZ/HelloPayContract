/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StrategyManager,
  StrategyManagerInterface,
} from "../../../contracts/strategies/StrategyManager";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "strategy",
        type: "address",
      },
    ],
    name: "AddStrategy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "strategy",
        type: "address",
      },
    ],
    name: "RemoveStrategy",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_strategy",
        type: "address",
      },
    ],
    name: "addStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_strategy",
        type: "address",
      },
    ],
    name: "isValidStrategy",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_strategy",
        type: "address",
      },
    ],
    name: "removeStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "strategiesStatus",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526001805534801561001457600080fd5b50338061003b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100448161004a565b5061009a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61044a806100a96000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d9578063aea15b7314610101578063c02d172714610134578063f2fde38b1461016d57600080fd5b8063175188e81461008d578063223e5479146100a257806354fd4d50146100b5578063715018a6146100d1575b600080fd5b6100a061009b3660046103d7565b610180565b005b6100a06100b03660046103d7565b61020b565b6100be60015481565b6040519081526020015b60405180910390f35b6100a0610292565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c8565b61012461010f3660046103d7565b60026020526000908152604090205460ff1681565b60405190151581526020016100c8565b6101246101423660046103d7565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b6100a061017b3660046103d7565b6102a6565b61018861030f565b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527fd3281a40d50ae838fe77dc627744037b8f0fc6a5711d66119a9b670c5cde41af91015b60405180910390a150565b61021361030f565b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f69887873d46778fb35539b0a9992d9176ca03c1820b0afb538bc3a6f63326b109101610200565b61029a61030f565b6102a46000610362565b565b6102ae61030f565b73ffffffffffffffffffffffffffffffffffffffff8116610303576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b61030c81610362565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102a4576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016102fa565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156103e957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461040d57600080fd5b939250505056fea2646970667358221220faa14ff4ef65b948a49ce11dfb9f752a2fb09cecd051ec7856757b4c4e73cbd964736f6c63430008160033";

type StrategyManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StrategyManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StrategyManager__factory extends ContractFactory {
  constructor(...args: StrategyManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StrategyManager> {
    return super.deploy(overrides || {}) as Promise<StrategyManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StrategyManager {
    return super.attach(address) as StrategyManager;
  }
  override connect(signer: Signer): StrategyManager__factory {
    return super.connect(signer) as StrategyManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StrategyManagerInterface {
    return new utils.Interface(_abi) as StrategyManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StrategyManager {
    return new Contract(address, _abi, signerOrProvider) as StrategyManager;
  }
}
