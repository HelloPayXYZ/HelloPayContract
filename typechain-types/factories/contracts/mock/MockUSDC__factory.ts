/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockUSDC,
  MockUSDCInterface,
} from "../../../contracts/mock/MockUSDC";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052600f60809081526e26b7b1b5902aa9a221902a37b5b2b760891b60a05260009061002e9082610135565b506040805180820190915260058152646d5553444360d81b60208201526001906100589082610135565b5064e8d4a510006002556003805460ff1916600617905534801561007b57600080fd5b50600254336000908152600460205260409020556101f4565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806100be57607f821691505b6020821081036100de57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610130576000816000526020600020601f850160051c8101602086101561010d5750805b601f850160051c820191505b8181101561012c57828155600101610119565b5050505b505050565b81516001600160401b0381111561014e5761014e610094565b6101628161015c84546100aa565b846100e4565b602080601f831160018114610197576000841561017f5750858301515b600019600386901b1c1916600185901b17855561012c565b600085815260208120601f198616915b828110156101c6578886015182559484019460019091019084016101a7565b50858210156101e45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61073b806102036000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063313ce5671161007657806395d89b411161005b57806395d89b4114610152578063a9059cbb1461015a578063dd62ed3e1461016d57600080fd5b8063313ce5671461011357806370a082311461013257600080fd5b806306fdde03146100a8578063095ea7b3146100c657806318160ddd146100e957806323b872dd14610100575b600080fd5b6100b0610198565b6040516100bd919061050c565b60405180910390f35b6100d96100d43660046105a2565b610226565b60405190151581526020016100bd565b6100f260025481565b6040519081526020016100bd565b6100d961010e3660046105cc565b6102a0565b6003546101209060ff1681565b60405160ff90911681526020016100bd565b6100f2610140366004610608565b60046020526000908152604090205481565b6100b061043b565b6100d96101683660046105a2565b610448565b6100f261017b36600461062a565b600560209081526000928352604080842090915290825290205481565b600080546101a59061065d565b80601f01602080910402602001604051908101604052809291908181526020018280546101d19061065d565b801561021e5780601f106101f35761010080835404028352916020019161021e565b820191906000526020600020905b81548152906001019060200180831161020157829003601f168201915b505050505081565b33600081815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061028e9086815260200190565b60405180910390a35060015b92915050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260408120548211156102d257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260056020908152604080832033845290915290205482111561030f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260046020526040812080548492906103449084906106df565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260408120805484929061037e9084906106f2565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600560209081526040808320338452909152812080548492906103c39084906106df565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161042991815260200190565b60405180910390a35060019392505050565b600180546101a59061065d565b3360009081526004602052604081205482111561046457600080fd5b33600090815260046020526040812080548492906104839084906106df565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600090815260046020526040812080548492906104bd9084906106f2565b909155505060405182815273ffffffffffffffffffffffffffffffffffffffff84169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161028e565b60006020808352835180602085015260005b8181101561053a5785810183015185820160400152820161051e565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461059d57600080fd5b919050565b600080604083850312156105b557600080fd5b6105be83610579565b946020939093013593505050565b6000806000606084860312156105e157600080fd5b6105ea84610579565b92506105f860208501610579565b9150604084013590509250925092565b60006020828403121561061a57600080fd5b61062382610579565b9392505050565b6000806040838503121561063d57600080fd5b61064683610579565b915061065460208401610579565b90509250929050565b600181811c9082168061067157607f821691505b6020821081036106aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561029a5761029a6106b0565b8082018082111561029a5761029a6106b056fea2646970667358221220ca598318bbbb81bb75147a07544cc0c62c334023118a251b206101a2becb9f0a64736f6c63430008160033";

type MockUSDCConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUSDCConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUSDC__factory extends ContractFactory {
  constructor(...args: MockUSDCConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockUSDC> {
    return super.deploy(overrides || {}) as Promise<MockUSDC>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockUSDC {
    return super.attach(address) as MockUSDC;
  }
  override connect(signer: Signer): MockUSDC__factory {
    return super.connect(signer) as MockUSDC__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUSDCInterface {
    return new utils.Interface(_abi) as MockUSDCInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockUSDC {
    return new Contract(address, _abi, signerOrProvider) as MockUSDC;
  }
}
