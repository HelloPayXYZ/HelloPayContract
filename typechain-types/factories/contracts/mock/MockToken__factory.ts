/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockToken,
  MockTokenInterface,
} from "../../../contracts/mock/MockToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e53380380610e5383398101604081905261002f91610291565b8181600361003d8382610383565b50600461004a8282610383565b505050610068336a084595161401484a00000061006f60201b60201c565b5050610468565b6001600160a01b03821661009e5760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b6100aa600083836100ae565b5050565b6001600160a01b0383166100d95780600260008282546100ce9190610441565b9091555061014b9050565b6001600160a01b0383166000908152602081905260409020548181101561012c5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610095565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661016757600280548290039055610186565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516101cb91815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126101ff57600080fd5b81516001600160401b03811115610218576102186101d8565b604051601f8201601f19908116603f011681016001600160401b0381118282101715610246576102466101d8565b60405281815283820160200185101561025e57600080fd5b60005b8281101561027d57602081860181015183830182015201610261565b506000918101602001919091529392505050565b600080604083850312156102a457600080fd5b82516001600160401b038111156102ba57600080fd5b6102c6858286016101ee565b602085015190935090506001600160401b038111156102e457600080fd5b6102f0858286016101ee565b9150509250929050565b600181811c9082168061030e57607f821691505b60208210810361032e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561037e57806000526020600020601f840160051c8101602085101561035b5750805b601f840160051c820191505b8181101561037b5760008155600101610367565b50505b505050565b81516001600160401b0381111561039c5761039c6101d8565b6103b0816103aa84546102fa565b84610334565b6020601f8211600181146103e457600083156103cc5750848201515b600019600385901b1c1916600184901b17845561037b565b600084815260208120601f198516915b8281101561041457878501518255602094850194600190920191016103f4565b50848210156104325786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b8082018082111561046257634e487b7160e01b600052601160045260246000fd5b92915050565b6109dc806104776000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806340c10f191161007657806395d89b411161005b57806395d89b4114610181578063a9059cbb14610189578063dd62ed3e1461019c57600080fd5b806340c10f191461013857806370a082311461014b57600080fd5b806318160ddd116100a757806318160ddd1461010457806323b872dd14610116578063313ce5671461012957600080fd5b806306fdde03146100c3578063095ea7b3146100e1575b600080fd5b6100cb6101e2565b6040516100d891906107c8565b60405180910390f35b6100f46100ef36600461085d565b610274565b60405190151581526020016100d8565b6002545b6040519081526020016100d8565b6100f4610124366004610887565b61028e565b604051601281526020016100d8565b6100f461014636600461085d565b6102b2565b6101086101593660046108c4565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100cb6102c7565b6100f461019736600461085d565b6102d6565b6101086101aa3660046108e6565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f190610919565b80601f016020809104026020016040519081016040528092919081815260200182805461021d90610919565b801561026a5780601f1061023f5761010080835404028352916020019161026a565b820191906000526020600020905b81548152906001019060200180831161024d57829003601f168201915b5050505050905090565b6000336102828185856102e4565b60019150505b92915050565b60003361029c8582856102f6565b6102a78585856103ca565b506001949350505050565b60006102be8383610475565b50600192915050565b6060600480546101f190610919565b6000336102828185856103ca565b6102f183838360016104d5565b505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146103c457818110156103b5576040517ffb8f41b200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101829052604481018390526064015b60405180910390fd5b6103c4848484840360006104d5565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661041a576040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600060048201526024016103ac565b73ffffffffffffffffffffffffffffffffffffffff821661046a576040517fec442f05000000000000000000000000000000000000000000000000000000008152600060048201526024016103ac565b6102f183838361061d565b73ffffffffffffffffffffffffffffffffffffffff82166104c5576040517fec442f05000000000000000000000000000000000000000000000000000000008152600060048201526024016103ac565b6104d16000838361061d565b5050565b73ffffffffffffffffffffffffffffffffffffffff8416610525576040517fe602df05000000000000000000000000000000000000000000000000000000008152600060048201526024016103ac565b73ffffffffffffffffffffffffffffffffffffffff8316610575576040517f94280d62000000000000000000000000000000000000000000000000000000008152600060048201526024016103ac565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260016020908152604080832093871683529290522082905580156103c4578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161060f91815260200190565b60405180910390a350505050565b73ffffffffffffffffffffffffffffffffffffffff831661065557806002600082825461064a919061096c565b909155506107079050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902054818110156106db576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101829052604481018390526064016103ac565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020819052604090209082900390555b73ffffffffffffffffffffffffffffffffffffffff82166107305760028054829003905561075c565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090208054820190555b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516107bb91815260200190565b60405180910390a3505050565b602081526000825180602084015260005b818110156107f657602081860181015160408684010152016107d9565b5060006040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461085857600080fd5b919050565b6000806040838503121561087057600080fd5b61087983610834565b946020939093013593505050565b60008060006060848603121561089c57600080fd5b6108a584610834565b92506108b360208501610834565b929592945050506040919091013590565b6000602082840312156108d657600080fd5b6108df82610834565b9392505050565b600080604083850312156108f957600080fd5b61090283610834565b915061091060208401610834565b90509250929050565b600181811c9082168061092d57607f821691505b602082108103610966577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b80820180821115610288577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220f50cfae59d8fb43a66b77d519a0ca512a10fd3c5467123d4cd2654f14b13c3c564736f6c634300081a0033";

type MockTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockToken__factory extends ContractFactory {
  constructor(...args: MockTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockToken> {
    return super.deploy(name, symbol, overrides || {}) as Promise<MockToken>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  override attach(address: string): MockToken {
    return super.attach(address) as MockToken;
  }
  override connect(signer: Signer): MockToken__factory {
    return super.connect(signer) as MockToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new utils.Interface(_abi) as MockTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockToken {
    return new Contract(address, _abi, signerOrProvider) as MockToken;
  }
}
