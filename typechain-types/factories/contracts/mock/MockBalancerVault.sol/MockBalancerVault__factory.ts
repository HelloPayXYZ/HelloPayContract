/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockBalancerVault,
  MockBalancerVaultInterface,
} from "../../../../contracts/mock/MockBalancerVault.sol/MockBalancerVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedInnerCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IFlashLoanRecipient",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "userData",
        type: "bytes",
      },
    ],
    name: "flashLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getFlashLoanFeePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProtocolFeesCollector",
    outputs: [
      {
        internalType: "contract IProtocolFeesCollector",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
    ],
    name: "setFeeRatio",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    name: "totalFees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506110fd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80635c38449e116100505780635c38449e146100b4578063d2946c2b146100c7578063d877845c146100d557600080fd5b806319f4ff2f1461006c5780634a793f2d14610081575b600080fd5b61007f61007a366004610b76565b600055565b005b6100a161008f366004610bb1565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b61007f6100c2366004610d6d565b6100dd565b6040513081526020016100ab565b6000546100a1565b6100e9835183516106e7565b6000835167ffffffffffffffff81111561010557610105610bce565b60405190808252806020026020018201604052801561012e578160200160208202803683370190505b5090506000845167ffffffffffffffff81111561014d5761014d610bce565b604051908082528060200260200182016040528015610176578160200160208202803683370190505b5090506000805b865181101561045f57600087828151811061019a5761019a610e68565b6020026020010151905060008783815181106101b8576101b8610e68565b602002602001015190508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1611600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610260576040518060400160405280600581526020017f7465737434000000000000000000000000000000000000000000000000000000815250610297565b6040518060400160405280600581526020017f74657374330000000000000000000000000000000000000000000000000000008152505b906102d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cf9190610f05565b60405180910390fd5b506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152919350839173ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036c9190610f18565b85848151811061037e5761037e610e68565b60200260200101818152505061039381610756565b8684815181106103a5576103a5610e68565b602002602001018181525050808584815181106103c4576103c4610e68565b60200260200101511015610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f746573743500000000000000000000000000000000000000000000000000000060448201526064016102cf565b61045573ffffffffffffffffffffffffffffffffffffffff83168b836107db565b505060010161017d565b506040517ff04f270700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063f04f2707906104b8908990899088908a90600401610f6d565b600060405180830381600087803b1580156104d257600080fd5b505af11580156104e6573d6000803e3d6000fd5b5050505060005b86518110156106dd57600087828151811061050a5761050a610e68565b60200260200101519050600084838151811061052857610528610e68565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156105a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c79190610f18565b905081811015610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f746573743600000000000000000000000000000000000000000000000000000060448201526064016102cf565b600061063f8383611034565b905087858151811061065357610653610e68565b60200260200101518110156106c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f746573743600000000000000000000000000000000000000000000000000000060448201526064016102cf565b6106ce848261086d565b505050508060010190506104ed565b5050505050505050565b808214610752576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cf9060208082526004908201527f7465737400000000000000000000000000000000000000000000000000000000604082015260600190565b5050565b6000803073ffffffffffffffffffffffffffffffffffffffff1663d877845c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c89190610f18565b90506107d483826108ab565b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261086890849061097d565b505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040812080548392906108a2908490611047565b90915550505050565b60008282028315806108cb5750828482816108c8576108c861105a565b04145b610931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f6f766572666c6f7700000000000000000000000000000000000000000000000060448201526064016102cf565b80600003610943576000915050610977565b670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201046001019150505b92915050565b600061099f73ffffffffffffffffffffffffffffffffffffffff841683610a13565b905080516000141580156109c45750808060200190518101906109c29190611089565b155b15610868576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016102cf565b60606107d483836000846000808573ffffffffffffffffffffffffffffffffffffffff168486604051610a4691906110ab565b60006040518083038185875af1925050503d8060008114610a83576040519150601f19603f3d011682016040523d82523d6000602084013e610a88565b606091505b5091509150610a98868383610aa2565b9695505050505050565b606082610ab757610ab282610b31565b6107d4565b8151158015610adb575073ffffffffffffffffffffffffffffffffffffffff84163b155b15610b2a576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024016102cf565b50806107d4565b805115610b415780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600060208284031215610b8857600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610b7357600080fd5b600060208284031215610bc357600080fd5b81356107d481610b8f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610c4457610c44610bce565b604052919050565b600067ffffffffffffffff821115610c6657610c66610bce565b5060051b60200190565b600082601f830112610c8157600080fd5b81356020610c96610c9183610c4c565b610bfd565b8083825260208201915060208460051b870101935086841115610cb857600080fd5b602086015b84811015610cd45780358352918301918301610cbd565b509695505050505050565b600082601f830112610cf057600080fd5b813567ffffffffffffffff811115610d0a57610d0a610bce565b610d3b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610bfd565b818152846020838601011115610d5057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215610d8357600080fd5b8435610d8e81610b8f565b935060208581013567ffffffffffffffff80821115610dac57600080fd5b818801915088601f830112610dc057600080fd5b8135610dce610c9182610c4c565b81815260059190911b8301840190848101908b831115610ded57600080fd5b938501935b82851015610e14578435610e0581610b8f565b82529385019390850190610df2565b975050506040880135925080831115610e2c57600080fd5b610e3889848a01610c70565b94506060880135925080831115610e4e57600080fd5b5050610e5c87828801610cdf565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b83811015610eb2578181015183820152602001610e9a565b50506000910152565b60008151808452610ed3816020860160208601610e97565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006107d46020830184610ebb565b600060208284031215610f2a57600080fd5b5051919050565b60008151808452602080850194506020840160005b83811015610f6257815187529582019590820190600101610f46565b509495945050505050565b6080808252855190820181905260009060209060a0840190828901845b82811015610fbc57815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101610f8a565b5050508381036020850152610fd18188610f31565b9150508281036040840152610fe68186610f31565b90508281036060840152610ffa8185610ebb565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561097757610977611005565b8082018082111561097757610977611005565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006020828403121561109b57600080fd5b815180151581146107d457600080fd5b600082516110bd818460208701610e97565b919091019291505056fea2646970667358221220e22225976f8da9784f935f8a5e56c5de80bf28c13dcfacdafea6f2e3bdf47aa664736f6c63430008160033";

type MockBalancerVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBalancerVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBalancerVault__factory extends ContractFactory {
  constructor(...args: MockBalancerVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockBalancerVault> {
    return super.deploy(overrides || {}) as Promise<MockBalancerVault>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockBalancerVault {
    return super.attach(address) as MockBalancerVault;
  }
  override connect(signer: Signer): MockBalancerVault__factory {
    return super.connect(signer) as MockBalancerVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBalancerVaultInterface {
    return new utils.Interface(_abi) as MockBalancerVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBalancerVault {
    return new Contract(address, _abi, signerOrProvider) as MockBalancerVault;
  }
}
