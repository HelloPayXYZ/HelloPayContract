/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  UniERC20,
  UniERC20Interface,
} from "../../../../contracts/external/AggregationRouterV5.sol/UniERC20";

const _abi = [
  {
    inputs: [],
    name: "ApproveCalledOnETH",
    type: "error",
  },
  {
    inputs: [],
    name: "ETHTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "FromIsNotSender",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughValue",
    type: "error",
  },
  {
    inputs: [],
    name: "ToIsNotThis",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122041caabd027da2517c0118ecb8e1e95d985e3e9b30f00856d2b13c9a8f99dfdfd64736f6c63430008160033";

type UniERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniERC20__factory extends ContractFactory {
  constructor(...args: UniERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UniERC20> {
    return super.deploy(overrides || {}) as Promise<UniERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UniERC20 {
    return super.attach(address) as UniERC20;
  }
  override connect(signer: Signer): UniERC20__factory {
    return super.connect(signer) as UniERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniERC20Interface {
    return new utils.Interface(_abi) as UniERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniERC20 {
    return new Contract(address, _abi, signerOrProvider) as UniERC20;
  }
}
