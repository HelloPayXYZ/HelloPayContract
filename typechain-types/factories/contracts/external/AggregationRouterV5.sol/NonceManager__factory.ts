/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  NonceManager,
  NonceManagerInterface,
} from "../../../../contracts/external/AggregationRouterV5.sol/NonceManager";

const _abi = [
  {
    inputs: [],
    name: "AdvanceNonceFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newNonce",
        type: "uint256",
      },
    ],
    name: "NonceIncreased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "amount",
        type: "uint8",
      },
    ],
    name: "advanceNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "increaseNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "makerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "makerNonce",
        type: "uint256",
      },
    ],
    name: "nonceEquals",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102af806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806370ae92d21461005157806372c244a814610084578063c53a029214610099578063cf6fc6e3146100a1575b600080fd5b61007161005f3660046101d0565b60006020819052908152604090205481565b6040519081526020015b60405180910390f35b6100976100923660046101f2565b6100c4565b005b61009761016c565b6100b46100af366004610215565b610178565b604051901515815260200161007b565b8060ff16600003610101576040517fbd71636d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526020819052604081205461011f9060ff84169061023f565b3360008181526020818152604091829020849055905183815292935090917ffc69110dd11eb791755e4abd6b7d281bae236de95736d38a23782814be5e10db910160405180910390a25050565b61017660016100c4565b565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481145b92915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146101cb57600080fd5b919050565b6000602082840312156101e257600080fd5b6101eb826101a7565b9392505050565b60006020828403121561020457600080fd5b813560ff811681146101eb57600080fd5b6000806040838503121561022857600080fd5b610231836101a7565b946020939093013593505050565b808201808211156101a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea264697066735822122039b4d858de91cf07b147e1ce6a03e390e6b9811991d0fd57e5ec5c7b22d28f3d64736f6c63430008160033";

type NonceManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NonceManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NonceManager__factory extends ContractFactory {
  constructor(...args: NonceManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NonceManager> {
    return super.deploy(overrides || {}) as Promise<NonceManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NonceManager {
    return super.attach(address) as NonceManager;
  }
  override connect(signer: Signer): NonceManager__factory {
    return super.connect(signer) as NonceManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NonceManagerInterface {
    return new utils.Interface(_abi) as NonceManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NonceManager {
    return new Contract(address, _abi, signerOrProvider) as NonceManager;
  }
}
