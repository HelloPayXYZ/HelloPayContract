/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  GenericRouter,
  GenericRouterInterface,
} from "../../../../contracts/external/AggregationRouterV5.sol/GenericRouter";

const _abi = [
  {
    inputs: [],
    name: "ETHTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "EthDepositRejected",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [],
    name: "ReturnAmountIsNotEnough",
    type: "error",
  },
  {
    inputs: [],
    name: "SafePermitBadLength",
    type: "error",
  },
  {
    inputs: [],
    name: "SafeTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "SafeTransferFromFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroMinReturn",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroReturnAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IAggregationExecutor",
        name: "executor",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "srcToken",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "dstToken",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "srcReceiver",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "dstReceiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minReturnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct GenericRouter.SwapDescription",
        name: "desc",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "permit",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "returnAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "spentAmount",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b38806100206000396000f3fe6080604052600436106100225760003560e01c806312aa3caf1461003657600080fd5b366100315761002f610062565b005b600080fd5b6100496100443660046109b3565b61009d565b6040805192835260208301919091520160405180910390f35b32330361009b576040517f1b10b0f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000808660a001356000036100de576040517f0262dde400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006100ed6020890189610a73565b9050600061010160408a0160208b01610a73565b905060006101248373ffffffffffffffffffffffffffffffffffffffff16610460565b905060c08a013560021615610182578061013f576000610145565b89608001355b341161017d576040517f1841b4e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101cc565b8061018e576000610194565b89608001355b34146101cc576040517f1841b4e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061022f5787156101f8576101f873ffffffffffffffffffffffffffffffffffffffff84168a8a6104b4565b61022f3361020c60608d0160408e01610a73565b73ffffffffffffffffffffffffffffffffffffffff8616919060808e013561056d565b6102408b338c608001358a8a61060a565b60808a0135935061026773ffffffffffffffffffffffffffffffffffffffff83163061066a565b9450846000036102a3576040517f28ebf24700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9094019360c08a0135600116156103ab5760006102f773ffffffffffffffffffffffffffffffffffffffff85163061066a565b90506001811115610351577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161032e8186610abf565b945061035173ffffffffffffffffffffffffffffffffffffffff8516338361072f565b61035f8560a08d0135610ad2565b61036d60808d013588610ad2565b10156103a5576040517ff32bec2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506103e9565b8960a001358510156103e9576040517ff32bec2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806103fc60808d0160608e01610a73565b73ffffffffffffffffffffffffffffffffffffffff161461042c5761042760808c0160608d01610a73565b61042e565b335b905061045173ffffffffffffffffffffffffffffffffffffffff8416828861072f565b50505050965096945050505050565b600073ffffffffffffffffffffffffffffffffffffffff821615806104ae575073ffffffffffffffffffffffffffffffffffffffff821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b92915050565b600060e08290036104f2576104eb847fd505accf000000000000000000000000000000000000000000000000000000008585610842565b905061055a565b610100829003610528576104eb847f8fcbaf0c000000000000000000000000000000000000000000000000000000008585610842565b6040517f6827585700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061056757610567610895565b50505050565b60006323b872dd60e01b905060006040518281528560048201528460248201528360448201526020600060648360008b5af191505080156105cb573d80156105c157600160005114601f3d111691506105c9565b6000873b1191505b505b80610602576040517ff405907100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6040517f4b64e4920000000000000000000000000000000000000000000000000000000080825260048201869052908284602483013784836024830101526000808460440183348b5af1610661573d6000823e3d81fd5b50505050505050565b600061067583610460565b15610698575073ffffffffffffffffffffffffffffffffffffffff8116316104ae565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301528416906370a0823190602401602060405180830381865afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107289190610ae9565b9392505050565b801561083d5761073e83610460565b1561081c578047101561077d576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168261138890604051600060405180830381858888f193505050503d80600081146107dc576040519150601f19603f3d011682016040523d82523d6000602084013e6107e1565b606091505b5050905080610567576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61083d73ffffffffffffffffffffffffffffffffffffffff841683836108a1565b505050565b6000816004016040518581528385600483013760206000838360008b5af192505050801561088d573d801561088357600160005114601f3d1116915061088b565b6000863b1191505b505b949350505050565b6040513d6000823e3d81fd5b6108cd837fa9059cbb000000000000000000000000000000000000000000000000000000008484610903565b61083d576040517ffb7f507900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518481528360048201528260248201526020600060448360008a5af1915050801561088d573d801561088357600160005114601f3d1116915061088b565b73ffffffffffffffffffffffffffffffffffffffff8116811461096757600080fd5b50565b60008083601f84011261097c57600080fd5b50813567ffffffffffffffff81111561099457600080fd5b6020830191508360208285010111156109ac57600080fd5b9250929050565b6000806000806000808688036101408112156109ce57600080fd5b87356109d981610945565b965060e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082011215610a0b57600080fd5b5060208701945061010087013567ffffffffffffffff80821115610a2e57600080fd5b610a3a8a838b0161096a565b9096509450610120890135915080821115610a5457600080fd5b50610a6189828a0161096a565b979a9699509497509295939492505050565b600060208284031215610a8557600080fd5b813561072881610945565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156104ae576104ae610a90565b80820281158282048414176104ae576104ae610a90565b600060208284031215610afb57600080fd5b505191905056fea264697066735822122039bcaef73054faa9911ce96aa37af18aa3fa6ed50615016cf8512bc93b0bcd6464736f6c63430008160033";

type GenericRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GenericRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GenericRouter__factory extends ContractFactory {
  constructor(...args: GenericRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GenericRouter> {
    return super.deploy(overrides || {}) as Promise<GenericRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GenericRouter {
    return super.attach(address) as GenericRouter;
  }
  override connect(signer: Signer): GenericRouter__factory {
    return super.connect(signer) as GenericRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GenericRouterInterface {
    return new utils.Interface(_abi) as GenericRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GenericRouter {
    return new Contract(address, _abi, signerOrProvider) as GenericRouter;
  }
}
