/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  PredicateHelper,
  PredicateHelperInterface,
} from "../../../../contracts/external/AggregationRouterV5.sol/PredicateHelper";

const _abi = [
  {
    inputs: [],
    name: "AdvanceNonceFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ArbitraryStaticCallFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectDataLength",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newNonce",
        type: "uint256",
      },
    ],
    name: "NonceIncreased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "amount",
        type: "uint8",
      },
    ],
    name: "advanceNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offsets",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "and",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "arbitraryStaticCall",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "eq",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "gt",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increaseNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "lt",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "makerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "makerNonce",
        type: "uint256",
      },
    ],
    name: "nonceEquals",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offsets",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "or",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "time",
        type: "uint256",
      },
    ],
    name: "timestampBelow",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timeNonceAccount",
        type: "uint256",
      },
    ],
    name: "timestampBelowAndNonceEquals",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a3e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80637426114511610081578063c53a02921161005b578063c53a0292146101b6578063ca4ece22146101be578063cf6fc6e3146101d157600080fd5b8063742611451461017d578063bf15fcd814610190578063bfa75143146101a357600080fd5b80636fe7b0ba116100b25780636fe7b0ba1461012757806370ae92d21461013a57806372c244a81461016857600080fd5b80632cc2878d146100d95780634f38e2b81461010157806363592c2b14610114575b600080fd5b6100ec6100e7366004610832565b6101e4565b60405190151581526020015b60405180910390f35b6100ec61010f36600461088d565b61021c565b6100ec610122366004610832565b421090565b6100ec61013536600461088d565b610247565b61015a610148366004610902565b60006020819052908152604090205481565b6040519081526020016100f8565b61017b61017636600461091d565b61026d565b005b6100ec61018b36600461088d565b610315565b61015a61019e366004610940565b61038c565b6100ec6101b136600461088d565b6103d7565b61017b61044a565b6100ec6101cc36600461088d565b610456565b6100ec6101df36600461097a565b61047d565b600060d082901c60a083901c65ffffffffffff168361020283421090565b80156102135750610213818361047d565b95945050505050565b600080600061022b85856104ac565b9150915081801561023b57508581115b925050505b9392505050565b600080600061025685856104ac565b9150915081801561023b5750909414949350505050565b8060ff166000036102aa576040517fbd71636d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152602081905260408120546102c89060ff8416906109a4565b3360008181526020818152604091829020849055905183815292935090917ffc69110dd11eb791755e4abd6b7d281bae236de95736d38a23782814be5e10db910160405180910390a25050565b60008080805b63ffffffff87821c169250821561037f5760008061034361033e86868a8c6109de565b6104ac565b915091508180156103545750806001145b1561036757600195505050505050610240565b5083925061037890506020826109a4565b905061031b565b5060009695505050505050565b600080600061039c86868661072e565b9150915081610213576040517f1f1b8f6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080805b63ffffffff87821c169250821561043d5760008061040061033e86868a8c6109de565b91509150811580610412575080600114155b1561042557600095505050505050610240565b5083925061043690506020826109a4565b90506103dd565b5060019695505050505050565b610454600161026d565b565b600080600061046585856104ac565b9150915081801561023b575094909410949350505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481145b92915050565b60008060006104bb858561075c565b60e01c905060006104ce8686600461079f565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffd33d78738201610520576001610502826101e4565b61050d576000610510565b60015b90945060ff169250610727915050565b63bf15fcd882101561061a57636fe7b0ba8210156105a8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffb0c71d4882016105715760016105028261010f898960646107e9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff9ca6d3d582016105a357600161050282421090565b610715565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff90184f4682016105e157600161050282610135898960646107e9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8bd9eebb82016105a35760016105028261018b898960646107e9565b63ca4ece228210156106a3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffff40ea0328820161066a57600161065f8261019e898960646107e9565b935093505050610727565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff4058aebd82016105a3576001610502826101b1898960646107e9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff35b131de82016106dc576001610502826101cc898960646107e9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff3090391d8201610715576001610502826101df8989602461079f565b61072030878761072e565b9350935050505b9250929050565b60008060405183858237602060008583895afa3d60201416925050811561075457506000515b935093915050565b60006004821015610799576040517fef356d7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50503590565b6000602082018310156107de576040517fef356d7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b509190910135919050565b36600082841015610826576040517fef356d7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50509182019291900390565b60006020828403121561084457600080fd5b5035919050565b60008083601f84011261085d57600080fd5b50813567ffffffffffffffff81111561087557600080fd5b60208301915083602082850101111561072757600080fd5b6000806000604084860312156108a257600080fd5b83359250602084013567ffffffffffffffff8111156108c057600080fd5b6108cc8682870161084b565b9497909650939450505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146108fd57600080fd5b919050565b60006020828403121561091457600080fd5b610240826108d9565b60006020828403121561092f57600080fd5b813560ff8116811461024057600080fd5b60008060006040848603121561095557600080fd5b61095e846108d9565b9250602084013567ffffffffffffffff8111156108c057600080fd5b6000806040838503121561098d57600080fd5b610996836108d9565b946020939093013593505050565b808201808211156104a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080858511156109ee57600080fd5b838611156109fb57600080fd5b505082019391909203915056fea2646970667358221220531ae9b51e9ff9c5851a3894e848f7dabb1fe29621a8fed4e5a432eb504e513264736f6c63430008160033";

type PredicateHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PredicateHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PredicateHelper__factory extends ContractFactory {
  constructor(...args: PredicateHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PredicateHelper> {
    return super.deploy(overrides || {}) as Promise<PredicateHelper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PredicateHelper {
    return super.attach(address) as PredicateHelper;
  }
  override connect(signer: Signer): PredicateHelper__factory {
    return super.connect(signer) as PredicateHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PredicateHelperInterface {
    return new utils.Interface(_abi) as PredicateHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PredicateHelper {
    return new Contract(address, _abi, signerOrProvider) as PredicateHelper;
  }
}
