/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface VestingCoachVaultInterface extends utils.Interface {
  functions: {
    "COMPLETED_CHECK_IN_NUMBER()": FunctionFragment;
    "checkIn(string,string)": FunctionFragment;
    "checkInDuration()": FunctionFragment;
    "checkInHistory(uint256)": FunctionFragment;
    "checkInReturn()": FunctionFragment;
    "completedReturn()": FunctionFragment;
    "currentCheckInNumber()": FunctionFragment;
    "donate(address,uint256,uint256,string)": FunctionFragment;
    "donationHistory(uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "isDonor(address)": FunctionFragment;
    "isSupervisor(address)": FunctionFragment;
    "lastCheckInTime()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerFid()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "starttime()": FunctionFragment;
    "supervise(uint256)": FunctionFragment;
    "totalCoachFund()": FunctionFragment;
    "totalDonatedTokens(uint256)": FunctionFragment;
    "totalDonationStatus(address)": FunctionFragment;
    "trainingDesc()": FunctionFragment;
    "trainingName()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COMPLETED_CHECK_IN_NUMBER"
      | "checkIn"
      | "checkInDuration"
      | "checkInHistory"
      | "checkInReturn"
      | "completedReturn"
      | "currentCheckInNumber"
      | "donate"
      | "donationHistory"
      | "factory"
      | "isDonor"
      | "isSupervisor"
      | "lastCheckInTime"
      | "owner"
      | "ownerFid"
      | "renounceOwnership"
      | "starttime"
      | "supervise"
      | "totalCoachFund"
      | "totalDonatedTokens"
      | "totalDonationStatus"
      | "trainingDesc"
      | "trainingName"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COMPLETED_CHECK_IN_NUMBER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkIn",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkInDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkInHistory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkInReturn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completedReturn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentCheckInNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "donationHistory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isDonor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupervisor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastCheckInTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerFid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "starttime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supervise",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCoachFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonatedTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonationStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "trainingDesc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trainingName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMPLETED_CHECK_IN_NUMBER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkInDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkInHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkInReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completedReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentCheckInNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donationHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDonor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupervisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCheckInTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerFid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "starttime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supervise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCoachFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonatedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trainingDesc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trainingName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CheckIn(address,uint256,uint256,uint256,uint256,string,string)": EventFragment;
    "ClaimDonation(address,address,uint256)": EventFragment;
    "Donation(address,uint256,address,uint256,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Supervise(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CheckIn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimDonation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Supervise"): EventFragment;
}

export interface CheckInEventObject {
  owner: string;
  fid: BigNumber;
  currentCheckInNumber: BigNumber;
  checkInReturn: BigNumber;
  completedReturn: BigNumber;
  memo: string;
  detailURL: string;
}
export type CheckInEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, string, string],
  CheckInEventObject
>;

export type CheckInEventFilter = TypedEventFilter<CheckInEvent>;

export interface ClaimDonationEventObject {
  owner: string;
  donateToken: string;
  donateAmount: BigNumber;
}
export type ClaimDonationEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimDonationEventObject
>;

export type ClaimDonationEventFilter = TypedEventFilter<ClaimDonationEvent>;

export interface DonationEventObject {
  donor: string;
  fid: BigNumber;
  donateToken: string;
  donateAmount: BigNumber;
  memo: string;
}
export type DonationEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  DonationEventObject
>;

export type DonationEventFilter = TypedEventFilter<DonationEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SuperviseEventObject {
  supervisor: string;
  fid: BigNumber;
}
export type SuperviseEvent = TypedEvent<
  [string, BigNumber],
  SuperviseEventObject
>;

export type SuperviseEventFilter = TypedEventFilter<SuperviseEvent>;

export interface VestingCoachVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VestingCoachVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COMPLETED_CHECK_IN_NUMBER(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkIn(
      _memo: PromiseOrValue<string>,
      _detailURL: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkInDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkInHistory(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { memo: string; detailURL: string }>;

    checkInReturn(overrides?: CallOverrides): Promise<[BigNumber]>;

    completedReturn(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentCheckInNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    donate(
      _donateToken: PromiseOrValue<string>,
      _donateAmount: PromiseOrValue<BigNumberish>,
      _fid: PromiseOrValue<BigNumberish>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donationHistory(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        donateToken: string;
        donor: string;
        donateAmount: BigNumber;
        memo: string;
      }
    >;

    factory(overrides?: CallOverrides): Promise<[string]>;

    isDonor(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupervisor(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastCheckInTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerFid(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starttime(overrides?: CallOverrides): Promise<[BigNumber]>;

    supervise(
      _fid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalCoachFund(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDonatedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalDonationStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        claimedAmount: BigNumber;
      }
    >;

    trainingDesc(overrides?: CallOverrides): Promise<[string]>;

    trainingName(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  COMPLETED_CHECK_IN_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

  checkIn(
    _memo: PromiseOrValue<string>,
    _detailURL: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkInDuration(overrides?: CallOverrides): Promise<BigNumber>;

  checkInHistory(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { memo: string; detailURL: string }>;

  checkInReturn(overrides?: CallOverrides): Promise<BigNumber>;

  completedReturn(overrides?: CallOverrides): Promise<BigNumber>;

  currentCheckInNumber(overrides?: CallOverrides): Promise<BigNumber>;

  donate(
    _donateToken: PromiseOrValue<string>,
    _donateAmount: PromiseOrValue<BigNumberish>,
    _fid: PromiseOrValue<BigNumberish>,
    _memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donationHistory(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      donateToken: string;
      donor: string;
      donateAmount: BigNumber;
      memo: string;
    }
  >;

  factory(overrides?: CallOverrides): Promise<string>;

  isDonor(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupervisor(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastCheckInTime(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerFid(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starttime(overrides?: CallOverrides): Promise<BigNumber>;

  supervise(
    _fid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalCoachFund(overrides?: CallOverrides): Promise<BigNumber>;

  totalDonatedTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalDonationStatus(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      claimedAmount: BigNumber;
    }
  >;

  trainingDesc(overrides?: CallOverrides): Promise<string>;

  trainingName(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COMPLETED_CHECK_IN_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

    checkIn(
      _memo: PromiseOrValue<string>,
      _detailURL: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkInDuration(overrides?: CallOverrides): Promise<BigNumber>;

    checkInHistory(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { memo: string; detailURL: string }>;

    checkInReturn(overrides?: CallOverrides): Promise<BigNumber>;

    completedReturn(overrides?: CallOverrides): Promise<BigNumber>;

    currentCheckInNumber(overrides?: CallOverrides): Promise<BigNumber>;

    donate(
      _donateToken: PromiseOrValue<string>,
      _donateAmount: PromiseOrValue<BigNumberish>,
      _fid: PromiseOrValue<BigNumberish>,
      _memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    donationHistory(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        donateToken: string;
        donor: string;
        donateAmount: BigNumber;
        memo: string;
      }
    >;

    factory(overrides?: CallOverrides): Promise<string>;

    isDonor(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupervisor(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastCheckInTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerFid(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    starttime(overrides?: CallOverrides): Promise<BigNumber>;

    supervise(
      _fid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCoachFund(overrides?: CallOverrides): Promise<BigNumber>;

    totalDonatedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalDonationStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        claimedAmount: BigNumber;
      }
    >;

    trainingDesc(overrides?: CallOverrides): Promise<string>;

    trainingName(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CheckIn(address,uint256,uint256,uint256,uint256,string,string)"(
      owner?: null,
      fid?: null,
      currentCheckInNumber?: null,
      checkInReturn?: null,
      completedReturn?: null,
      memo?: null,
      detailURL?: null
    ): CheckInEventFilter;
    CheckIn(
      owner?: null,
      fid?: null,
      currentCheckInNumber?: null,
      checkInReturn?: null,
      completedReturn?: null,
      memo?: null,
      detailURL?: null
    ): CheckInEventFilter;

    "ClaimDonation(address,address,uint256)"(
      owner?: null,
      donateToken?: null,
      donateAmount?: null
    ): ClaimDonationEventFilter;
    ClaimDonation(
      owner?: null,
      donateToken?: null,
      donateAmount?: null
    ): ClaimDonationEventFilter;

    "Donation(address,uint256,address,uint256,string)"(
      donor?: null,
      fid?: null,
      donateToken?: null,
      donateAmount?: null,
      memo?: null
    ): DonationEventFilter;
    Donation(
      donor?: null,
      fid?: null,
      donateToken?: null,
      donateAmount?: null,
      memo?: null
    ): DonationEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Supervise(address,uint256)"(
      supervisor?: null,
      fid?: null
    ): SuperviseEventFilter;
    Supervise(supervisor?: null, fid?: null): SuperviseEventFilter;
  };

  estimateGas: {
    COMPLETED_CHECK_IN_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

    checkIn(
      _memo: PromiseOrValue<string>,
      _detailURL: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkInDuration(overrides?: CallOverrides): Promise<BigNumber>;

    checkInHistory(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkInReturn(overrides?: CallOverrides): Promise<BigNumber>;

    completedReturn(overrides?: CallOverrides): Promise<BigNumber>;

    currentCheckInNumber(overrides?: CallOverrides): Promise<BigNumber>;

    donate(
      _donateToken: PromiseOrValue<string>,
      _donateAmount: PromiseOrValue<BigNumberish>,
      _fid: PromiseOrValue<BigNumberish>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donationHistory(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    isDonor(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupervisor(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastCheckInTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerFid(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starttime(overrides?: CallOverrides): Promise<BigNumber>;

    supervise(
      _fid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalCoachFund(overrides?: CallOverrides): Promise<BigNumber>;

    totalDonatedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDonationStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trainingDesc(overrides?: CallOverrides): Promise<BigNumber>;

    trainingName(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COMPLETED_CHECK_IN_NUMBER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIn(
      _memo: PromiseOrValue<string>,
      _detailURL: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkInDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkInHistory(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkInReturn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    completedReturn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentCheckInNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donate(
      _donateToken: PromiseOrValue<string>,
      _donateAmount: PromiseOrValue<BigNumberish>,
      _fid: PromiseOrValue<BigNumberish>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donationHistory(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDonor(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupervisor(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastCheckInTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerFid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starttime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supervise(
      _fid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalCoachFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDonatedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDonationStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trainingDesc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trainingName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
