/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LybraPeUSDStrategyWithUniswapV3Interface
  extends utils.Interface {
  functions: {
    "balancerAdapter()": FunctionFragment;
    "borrow(uint256)": FunctionFragment;
    "calculatePerformanceFee(address)": FunctionFragment;
    "closePosition()": FunctionFragment;
    "createPosition(uint256,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "getGlobalInfo()": FunctionFragment;
    "getPositionInfo(address)": FunctionFragment;
    "increaseLeverage(uint256)": FunctionFragment;
    "lybraAdapter()": FunctionFragment;
    "peUSD()": FunctionFragment;
    "performanceFeeRatio()": FunctionFragment;
    "reduceLeverage(uint256)": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "uniswapV3Adapter()": FunctionFragment;
    "usdc()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "wstETH()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balancerAdapter"
      | "borrow"
      | "calculatePerformanceFee"
      | "closePosition"
      | "createPosition"
      | "deposit"
      | "feeReceiver"
      | "getGlobalInfo"
      | "getPositionInfo"
      | "increaseLeverage"
      | "lybraAdapter"
      | "peUSD"
      | "performanceFeeRatio"
      | "reduceLeverage"
      | "repay"
      | "uniswapV3Adapter"
      | "usdc"
      | "withdraw"
      | "wstETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balancerAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePerformanceFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLeverage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lybraAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "peUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reduceLeverage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Adapter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "wstETH", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "balancerAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lybraAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "peUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reduceLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Adapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wstETH", data: BytesLike): Result;

  events: {
    "Borrow(address,uint256)": EventFragment;
    "CloseLeverage(address,uint256,uint256,uint256)": EventFragment;
    "CollectFee(address,address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "IncreaseLeverage(address,uint256,uint256,uint256)": EventFragment;
    "Repay(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseLeverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseLeverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface BorrowEventObject {
  account: string;
  amount: BigNumber;
}
export type BorrowEvent = TypedEvent<[string, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface CloseLeverageEventObject {
  account: string;
  flashloanETH: BigNumber;
  withdrawWstETH: BigNumber;
  repayETH: BigNumber;
}
export type CloseLeverageEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  CloseLeverageEventObject
>;

export type CloseLeverageEventFilter = TypedEventFilter<CloseLeverageEvent>;

export interface CollectFeeEventObject {
  token: string;
  account: string;
  amount: BigNumber;
}
export type CollectFeeEvent = TypedEvent<
  [string, string, BigNumber],
  CollectFeeEventObject
>;

export type CollectFeeEventFilter = TypedEventFilter<CollectFeeEvent>;

export interface DepositEventObject {
  account: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface IncreaseLeverageEventObject {
  account: string;
  flashloanWstETH: BigNumber;
  depositWstETHLev: BigNumber;
  borrowETH: BigNumber;
}
export type IncreaseLeverageEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  IncreaseLeverageEventObject
>;

export type IncreaseLeverageEventFilter =
  TypedEventFilter<IncreaseLeverageEvent>;

export interface RepayEventObject {
  account: string;
  amount: BigNumber;
}
export type RepayEvent = TypedEvent<[string, BigNumber], RepayEventObject>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface WithdrawEventObject {
  account: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface LybraPeUSDStrategyWithUniswapV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LybraPeUSDStrategyWithUniswapV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balancerAdapter(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      borrowPeUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculatePerformanceFee(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        performance: BigNumber;
        performanceFee: BigNumber;
      }
    >;

    closePosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPosition(
      principalWstETH: PromiseOrValue<BigNumberish>,
      depositWstETHLev: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      depositWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    getGlobalInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { supplyRate: BigNumber; borrowRate: BigNumber }
    >;

    getPositionInfo(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalCollateralBase: BigNumber;
        totalCollateralAmount: BigNumber;
        totalDebtBase: BigNumber;
        totalDebtAmount: BigNumber;
        availableBorrowsBase: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    increaseLeverage(
      depositWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lybraAdapter(overrides?: CallOverrides): Promise<[string]>;

    peUSD(overrides?: CallOverrides): Promise<[string]>;

    performanceFeeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    reduceLeverage(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      repayPeUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3Adapter(overrides?: CallOverrides): Promise<[string]>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wstETH(overrides?: CallOverrides): Promise<[string]>;
  };

  balancerAdapter(overrides?: CallOverrides): Promise<string>;

  borrow(
    borrowPeUSD: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculatePerformanceFee(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      performance: BigNumber;
      performanceFee: BigNumber;
    }
  >;

  closePosition(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPosition(
    principalWstETH: PromiseOrValue<BigNumberish>,
    depositWstETHLev: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    depositWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  getGlobalInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { supplyRate: BigNumber; borrowRate: BigNumber }
  >;

  getPositionInfo(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalCollateralBase: BigNumber;
      totalCollateralAmount: BigNumber;
      totalDebtBase: BigNumber;
      totalDebtAmount: BigNumber;
      availableBorrowsBase: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
    }
  >;

  increaseLeverage(
    depositWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lybraAdapter(overrides?: CallOverrides): Promise<string>;

  peUSD(overrides?: CallOverrides): Promise<string>;

  performanceFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  reduceLeverage(
    withdrawWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    repayPeUSD: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3Adapter(overrides?: CallOverrides): Promise<string>;

  usdc(overrides?: CallOverrides): Promise<string>;

  withdraw(
    withdrawWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wstETH(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    balancerAdapter(overrides?: CallOverrides): Promise<string>;

    borrow(
      borrowPeUSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculatePerformanceFee(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        performance: BigNumber;
        performanceFee: BigNumber;
      }
    >;

    closePosition(overrides?: CallOverrides): Promise<void>;

    createPosition(
      principalWstETH: PromiseOrValue<BigNumberish>,
      depositWstETHLev: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      depositWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    getGlobalInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { supplyRate: BigNumber; borrowRate: BigNumber }
    >;

    getPositionInfo(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalCollateralBase: BigNumber;
        totalCollateralAmount: BigNumber;
        totalDebtBase: BigNumber;
        totalDebtAmount: BigNumber;
        availableBorrowsBase: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    increaseLeverage(
      depositWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lybraAdapter(overrides?: CallOverrides): Promise<string>;

    peUSD(overrides?: CallOverrides): Promise<string>;

    performanceFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    reduceLeverage(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      repayPeUSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3Adapter(overrides?: CallOverrides): Promise<string>;

    usdc(overrides?: CallOverrides): Promise<string>;

    withdraw(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    wstETH(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Borrow(address,uint256)"(account?: null, amount?: null): BorrowEventFilter;
    Borrow(account?: null, amount?: null): BorrowEventFilter;

    "CloseLeverage(address,uint256,uint256,uint256)"(
      account?: null,
      flashloanETH?: null,
      withdrawWstETH?: null,
      repayETH?: null
    ): CloseLeverageEventFilter;
    CloseLeverage(
      account?: null,
      flashloanETH?: null,
      withdrawWstETH?: null,
      repayETH?: null
    ): CloseLeverageEventFilter;

    "CollectFee(address,address,uint256)"(
      token?: null,
      account?: null,
      amount?: null
    ): CollectFeeEventFilter;
    CollectFee(
      token?: null,
      account?: null,
      amount?: null
    ): CollectFeeEventFilter;

    "Deposit(address,uint256)"(
      account?: null,
      amount?: null
    ): DepositEventFilter;
    Deposit(account?: null, amount?: null): DepositEventFilter;

    "IncreaseLeverage(address,uint256,uint256,uint256)"(
      account?: null,
      flashloanWstETH?: null,
      depositWstETHLev?: null,
      borrowETH?: null
    ): IncreaseLeverageEventFilter;
    IncreaseLeverage(
      account?: null,
      flashloanWstETH?: null,
      depositWstETHLev?: null,
      borrowETH?: null
    ): IncreaseLeverageEventFilter;

    "Repay(address,uint256)"(account?: null, amount?: null): RepayEventFilter;
    Repay(account?: null, amount?: null): RepayEventFilter;

    "Withdraw(address,uint256)"(
      account?: null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(account?: null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    balancerAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      borrowPeUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculatePerformanceFee(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPosition(
      principalWstETH: PromiseOrValue<BigNumberish>,
      depositWstETHLev: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      depositWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionInfo(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLeverage(
      depositWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lybraAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    peUSD(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    reduceLeverage(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      repayPeUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3Adapter(overrides?: CallOverrides): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wstETH(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balancerAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      borrowPeUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculatePerformanceFee(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPosition(
      principalWstETH: PromiseOrValue<BigNumberish>,
      depositWstETHLev: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      depositWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGlobalInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositionInfo(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLeverage(
      depositWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lybraAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFeeRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reduceLeverage(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      repayPeUSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3Adapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wstETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
