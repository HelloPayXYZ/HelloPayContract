/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AAVEV3DeltaRiskNeutralStrategyInterface
  extends utils.Interface {
  functions: {
    "aaveV3Adapter()": FunctionFragment;
    "addLeverage(uint256)": FunctionFragment;
    "balancerAdapter()": FunctionFragment;
    "borrow(uint256)": FunctionFragment;
    "borrowToken()": FunctionFragment;
    "calculatePositionStatus(address)": FunctionFragment;
    "closePosition()": FunctionFragment;
    "createPosition(uint256,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositAndAddLeverage(uint256,uint256)": FunctionFragment;
    "depositAndRemoveLeverage(uint256,uint256)": FunctionFragment;
    "dleverOracle()": FunctionFragment;
    "earnToken()": FunctionFragment;
    "factory()": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "getAddLeverageInfo(uint256)": FunctionFragment;
    "getGlobalInfo()": FunctionFragment;
    "getPositionInfo(address)": FunctionFragment;
    "getRemoveLeverageInfo(uint256)": FunctionFragment;
    "performanceFeeRatio()": FunctionFragment;
    "positions(address)": FunctionFragment;
    "removeLeverage(uint256)": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "uniswapV3Adapter()": FunctionFragment;
    "version()": FunctionFragment;
    "wETH()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAndAddLeverage(uint256,uint256)": FunctionFragment;
    "withdrawAndRemoveLeverage(uint256,uint256)": FunctionFragment;
    "wstETH()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aaveV3Adapter"
      | "addLeverage"
      | "balancerAdapter"
      | "borrow"
      | "borrowToken"
      | "calculatePositionStatus"
      | "closePosition"
      | "createPosition"
      | "deposit"
      | "depositAndAddLeverage"
      | "depositAndRemoveLeverage"
      | "dleverOracle"
      | "earnToken"
      | "factory"
      | "feeReceiver"
      | "getAddLeverageInfo"
      | "getGlobalInfo"
      | "getPositionInfo"
      | "getRemoveLeverageInfo"
      | "performanceFeeRatio"
      | "positions"
      | "removeLeverage"
      | "repay"
      | "uniswapV3Adapter"
      | "version"
      | "wETH"
      | "withdraw"
      | "withdrawAndAddLeverage"
      | "withdrawAndRemoveLeverage"
      | "wstETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aaveV3Adapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLeverage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balancerAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePositionStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndAddLeverage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndRemoveLeverage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dleverOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "earnToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddLeverageInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemoveLeverageInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "performanceFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLeverage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Adapter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "wETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndAddLeverage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndRemoveLeverage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "wstETH", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "aaveV3Adapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancerAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePositionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndAddLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndRemoveLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dleverOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earnToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddLeverageInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemoveLeverageInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Adapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndAddLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndRemoveLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wstETH", data: BytesLike): Result;

  events: {
    "AddLeverage(address,uint256,uint256)": EventFragment;
    "Borrow(address,uint256,uint256)": EventFragment;
    "ClosePosition(address,uint256)": EventFragment;
    "CreatePosition(address,uint256,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "DepositAndAddLeverage(address,uint256,uint256,uint256)": EventFragment;
    "DepositAndRemoveLeverage(address,uint256,uint256,uint256)": EventFragment;
    "RemoveLeverage(address,uint256,uint256)": EventFragment;
    "Repay(address,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
    "WithdrawAndAddLeverage(address,uint256,uint256,uint256)": EventFragment;
    "WithdrawAndRemoveLeverage(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLeverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositAndAddLeverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositAndRemoveLeverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLeverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawAndAddLeverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawAndRemoveLeverage"): EventFragment;
}

export interface AddLeverageEventObject {
  account: string;
  addLeverageAmount: BigNumber;
  lastPositionNetValue: BigNumber;
}
export type AddLeverageEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AddLeverageEventObject
>;

export type AddLeverageEventFilter = TypedEventFilter<AddLeverageEvent>;

export interface BorrowEventObject {
  account: string;
  borrowAmount: BigNumber;
  lastPositionNetValue: BigNumber;
}
export type BorrowEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BorrowEventObject
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface ClosePositionEventObject {
  account: string;
  lastPositionNetValue: BigNumber;
}
export type ClosePositionEvent = TypedEvent<
  [string, BigNumber],
  ClosePositionEventObject
>;

export type ClosePositionEventFilter = TypedEventFilter<ClosePositionEvent>;

export interface CreatePositionEventObject {
  account: string;
  principalAmount: BigNumber;
  leverageAmount: BigNumber;
  lastPositionNetValue: BigNumber;
}
export type CreatePositionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  CreatePositionEventObject
>;

export type CreatePositionEventFilter = TypedEventFilter<CreatePositionEvent>;

export interface DepositEventObject {
  account: string;
  depositAmount: BigNumber;
  lastPositionNetValue: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositAndAddLeverageEventObject {
  account: string;
  depositAmount: BigNumber;
  addLeverageAmount: BigNumber;
  lastPositionNetValue: BigNumber;
}
export type DepositAndAddLeverageEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DepositAndAddLeverageEventObject
>;

export type DepositAndAddLeverageEventFilter =
  TypedEventFilter<DepositAndAddLeverageEvent>;

export interface DepositAndRemoveLeverageEventObject {
  account: string;
  depositAmount: BigNumber;
  removeLeverageAmount: BigNumber;
  lastPositionNetValue: BigNumber;
}
export type DepositAndRemoveLeverageEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DepositAndRemoveLeverageEventObject
>;

export type DepositAndRemoveLeverageEventFilter =
  TypedEventFilter<DepositAndRemoveLeverageEvent>;

export interface RemoveLeverageEventObject {
  account: string;
  removeLeverageAmount: BigNumber;
  lastPositionNetValue: BigNumber;
}
export type RemoveLeverageEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RemoveLeverageEventObject
>;

export type RemoveLeverageEventFilter = TypedEventFilter<RemoveLeverageEvent>;

export interface RepayEventObject {
  account: string;
  repayAmount: BigNumber;
  lastPositionNetValue: BigNumber;
}
export type RepayEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RepayEventObject
>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface WithdrawEventObject {
  account: string;
  withdrawAmount: BigNumber;
  lastPositionNetValue: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawAndAddLeverageEventObject {
  account: string;
  withdrawAmount: BigNumber;
  addLeverageAmount: BigNumber;
  lastPositionNetValue: BigNumber;
}
export type WithdrawAndAddLeverageEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  WithdrawAndAddLeverageEventObject
>;

export type WithdrawAndAddLeverageEventFilter =
  TypedEventFilter<WithdrawAndAddLeverageEvent>;

export interface WithdrawAndRemoveLeverageEventObject {
  account: string;
  withdrawAmount: BigNumber;
  removeLeverageAmount: BigNumber;
  lastPositionNetValue: BigNumber;
}
export type WithdrawAndRemoveLeverageEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  WithdrawAndRemoveLeverageEventObject
>;

export type WithdrawAndRemoveLeverageEventFilter =
  TypedEventFilter<WithdrawAndRemoveLeverageEvent>;

export interface AAVEV3DeltaRiskNeutralStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AAVEV3DeltaRiskNeutralStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aaveV3Adapter(overrides?: CallOverrides): Promise<[string]>;

    addLeverage(
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balancerAdapter(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      borrowETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowToken(overrides?: CallOverrides): Promise<[string]>;

    calculatePositionStatus(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        performance: BigNumber;
        performanceFee: BigNumber;
        lastPostionNetValue: BigNumber;
      }
    >;

    closePosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPosition(
      depositWstETH: PromiseOrValue<BigNumberish>,
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      depositWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndAddLeverage(
      depositWstETH: PromiseOrValue<BigNumberish>,
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndRemoveLeverage(
      depositWstETH: PromiseOrValue<BigNumberish>,
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dleverOracle(overrides?: CallOverrides): Promise<[string]>;

    earnToken(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    getAddLeverageInfo(
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { borrowETH: BigNumber; flashLoanFee: BigNumber }
    >;

    getGlobalInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { supplyRate: BigNumber; borrowRate: BigNumber }
    >;

    getPositionInfo(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalCollateralBase: BigNumber;
        totalCollateralAmount: BigNumber;
        totalDebtBase: BigNumber;
        totalDebtAmount: BigNumber;
        availableBorrowsBase: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    getRemoveLeverageInfo(
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        flashLoanETH: BigNumber;
        flashLoanFee: BigNumber;
      }
    >;

    performanceFeeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    positions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        collateralETHValue: BigNumber;
        loanETHValue: BigNumber;
        isNotFirst: boolean;
      }
    >;

    removeLeverage(
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      repayETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3Adapter(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    wETH(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAndAddLeverage(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAndRemoveLeverage(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wstETH(overrides?: CallOverrides): Promise<[string]>;
  };

  aaveV3Adapter(overrides?: CallOverrides): Promise<string>;

  addLeverage(
    addLeverageWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balancerAdapter(overrides?: CallOverrides): Promise<string>;

  borrow(
    borrowETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowToken(overrides?: CallOverrides): Promise<string>;

  calculatePositionStatus(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      performance: BigNumber;
      performanceFee: BigNumber;
      lastPostionNetValue: BigNumber;
    }
  >;

  closePosition(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPosition(
    depositWstETH: PromiseOrValue<BigNumberish>,
    addLeverageWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    depositWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndAddLeverage(
    depositWstETH: PromiseOrValue<BigNumberish>,
    addLeverageWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndRemoveLeverage(
    depositWstETH: PromiseOrValue<BigNumberish>,
    removeLeverageWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dleverOracle(overrides?: CallOverrides): Promise<string>;

  earnToken(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  getAddLeverageInfo(
    addLeverageWstETH: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { borrowETH: BigNumber; flashLoanFee: BigNumber }
  >;

  getGlobalInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { supplyRate: BigNumber; borrowRate: BigNumber }
  >;

  getPositionInfo(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalCollateralBase: BigNumber;
      totalCollateralAmount: BigNumber;
      totalDebtBase: BigNumber;
      totalDebtAmount: BigNumber;
      availableBorrowsBase: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
    }
  >;

  getRemoveLeverageInfo(
    removeLeverageWstETH: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      flashLoanETH: BigNumber;
      flashLoanFee: BigNumber;
    }
  >;

  performanceFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  positions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      collateralETHValue: BigNumber;
      loanETHValue: BigNumber;
      isNotFirst: boolean;
    }
  >;

  removeLeverage(
    removeLeverageWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    repayETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3Adapter(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  wETH(overrides?: CallOverrides): Promise<string>;

  withdraw(
    withdrawWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAndAddLeverage(
    withdrawWstETH: PromiseOrValue<BigNumberish>,
    addLeverageWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAndRemoveLeverage(
    withdrawWstETH: PromiseOrValue<BigNumberish>,
    removeLeverageWstETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wstETH(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aaveV3Adapter(overrides?: CallOverrides): Promise<string>;

    addLeverage(
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balancerAdapter(overrides?: CallOverrides): Promise<string>;

    borrow(
      borrowETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowToken(overrides?: CallOverrides): Promise<string>;

    calculatePositionStatus(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        performance: BigNumber;
        performanceFee: BigNumber;
        lastPostionNetValue: BigNumber;
      }
    >;

    closePosition(overrides?: CallOverrides): Promise<void>;

    createPosition(
      depositWstETH: PromiseOrValue<BigNumberish>,
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      depositWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndAddLeverage(
      depositWstETH: PromiseOrValue<BigNumberish>,
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndRemoveLeverage(
      depositWstETH: PromiseOrValue<BigNumberish>,
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dleverOracle(overrides?: CallOverrides): Promise<string>;

    earnToken(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    getAddLeverageInfo(
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { borrowETH: BigNumber; flashLoanFee: BigNumber }
    >;

    getGlobalInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { supplyRate: BigNumber; borrowRate: BigNumber }
    >;

    getPositionInfo(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalCollateralBase: BigNumber;
        totalCollateralAmount: BigNumber;
        totalDebtBase: BigNumber;
        totalDebtAmount: BigNumber;
        availableBorrowsBase: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    getRemoveLeverageInfo(
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        flashLoanETH: BigNumber;
        flashLoanFee: BigNumber;
      }
    >;

    performanceFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        collateralETHValue: BigNumber;
        loanETHValue: BigNumber;
        isNotFirst: boolean;
      }
    >;

    removeLeverage(
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      repayETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3Adapter(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    wETH(overrides?: CallOverrides): Promise<string>;

    withdraw(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAndAddLeverage(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAndRemoveLeverage(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    wstETH(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddLeverage(address,uint256,uint256)"(
      account?: null,
      addLeverageAmount?: null,
      lastPositionNetValue?: null
    ): AddLeverageEventFilter;
    AddLeverage(
      account?: null,
      addLeverageAmount?: null,
      lastPositionNetValue?: null
    ): AddLeverageEventFilter;

    "Borrow(address,uint256,uint256)"(
      account?: null,
      borrowAmount?: null,
      lastPositionNetValue?: null
    ): BorrowEventFilter;
    Borrow(
      account?: null,
      borrowAmount?: null,
      lastPositionNetValue?: null
    ): BorrowEventFilter;

    "ClosePosition(address,uint256)"(
      account?: null,
      lastPositionNetValue?: null
    ): ClosePositionEventFilter;
    ClosePosition(
      account?: null,
      lastPositionNetValue?: null
    ): ClosePositionEventFilter;

    "CreatePosition(address,uint256,uint256,uint256)"(
      account?: null,
      principalAmount?: null,
      leverageAmount?: null,
      lastPositionNetValue?: null
    ): CreatePositionEventFilter;
    CreatePosition(
      account?: null,
      principalAmount?: null,
      leverageAmount?: null,
      lastPositionNetValue?: null
    ): CreatePositionEventFilter;

    "Deposit(address,uint256,uint256)"(
      account?: null,
      depositAmount?: null,
      lastPositionNetValue?: null
    ): DepositEventFilter;
    Deposit(
      account?: null,
      depositAmount?: null,
      lastPositionNetValue?: null
    ): DepositEventFilter;

    "DepositAndAddLeverage(address,uint256,uint256,uint256)"(
      account?: null,
      depositAmount?: null,
      addLeverageAmount?: null,
      lastPositionNetValue?: null
    ): DepositAndAddLeverageEventFilter;
    DepositAndAddLeverage(
      account?: null,
      depositAmount?: null,
      addLeverageAmount?: null,
      lastPositionNetValue?: null
    ): DepositAndAddLeverageEventFilter;

    "DepositAndRemoveLeverage(address,uint256,uint256,uint256)"(
      account?: null,
      depositAmount?: null,
      removeLeverageAmount?: null,
      lastPositionNetValue?: null
    ): DepositAndRemoveLeverageEventFilter;
    DepositAndRemoveLeverage(
      account?: null,
      depositAmount?: null,
      removeLeverageAmount?: null,
      lastPositionNetValue?: null
    ): DepositAndRemoveLeverageEventFilter;

    "RemoveLeverage(address,uint256,uint256)"(
      account?: null,
      removeLeverageAmount?: null,
      lastPositionNetValue?: null
    ): RemoveLeverageEventFilter;
    RemoveLeverage(
      account?: null,
      removeLeverageAmount?: null,
      lastPositionNetValue?: null
    ): RemoveLeverageEventFilter;

    "Repay(address,uint256,uint256)"(
      account?: null,
      repayAmount?: null,
      lastPositionNetValue?: null
    ): RepayEventFilter;
    Repay(
      account?: null,
      repayAmount?: null,
      lastPositionNetValue?: null
    ): RepayEventFilter;

    "Withdraw(address,uint256,uint256)"(
      account?: null,
      withdrawAmount?: null,
      lastPositionNetValue?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: null,
      withdrawAmount?: null,
      lastPositionNetValue?: null
    ): WithdrawEventFilter;

    "WithdrawAndAddLeverage(address,uint256,uint256,uint256)"(
      account?: null,
      withdrawAmount?: null,
      addLeverageAmount?: null,
      lastPositionNetValue?: null
    ): WithdrawAndAddLeverageEventFilter;
    WithdrawAndAddLeverage(
      account?: null,
      withdrawAmount?: null,
      addLeverageAmount?: null,
      lastPositionNetValue?: null
    ): WithdrawAndAddLeverageEventFilter;

    "WithdrawAndRemoveLeverage(address,uint256,uint256,uint256)"(
      account?: null,
      withdrawAmount?: null,
      removeLeverageAmount?: null,
      lastPositionNetValue?: null
    ): WithdrawAndRemoveLeverageEventFilter;
    WithdrawAndRemoveLeverage(
      account?: null,
      withdrawAmount?: null,
      removeLeverageAmount?: null,
      lastPositionNetValue?: null
    ): WithdrawAndRemoveLeverageEventFilter;
  };

  estimateGas: {
    aaveV3Adapter(overrides?: CallOverrides): Promise<BigNumber>;

    addLeverage(
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balancerAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      borrowETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowToken(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePositionStatus(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPosition(
      depositWstETH: PromiseOrValue<BigNumberish>,
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      depositWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndAddLeverage(
      depositWstETH: PromiseOrValue<BigNumberish>,
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndRemoveLeverage(
      depositWstETH: PromiseOrValue<BigNumberish>,
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dleverOracle(overrides?: CallOverrides): Promise<BigNumber>;

    earnToken(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    getAddLeverageInfo(
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionInfo(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemoveLeverageInfo(
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performanceFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLeverage(
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      repayETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3Adapter(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    wETH(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAndAddLeverage(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAndRemoveLeverage(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wstETH(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aaveV3Adapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLeverage(
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balancerAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      borrowETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePositionStatus(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPosition(
      depositWstETH: PromiseOrValue<BigNumberish>,
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      depositWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndAddLeverage(
      depositWstETH: PromiseOrValue<BigNumberish>,
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndRemoveLeverage(
      depositWstETH: PromiseOrValue<BigNumberish>,
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dleverOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earnToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAddLeverageInfo(
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositionInfo(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemoveLeverageInfo(
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceFeeRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLeverage(
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      repayETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3Adapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndAddLeverage(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      addLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndRemoveLeverage(
      withdrawWstETH: PromiseOrValue<BigNumberish>,
      removeLeverageWstETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wstETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
