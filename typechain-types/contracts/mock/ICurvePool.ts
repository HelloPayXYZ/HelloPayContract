/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ICurvePoolInterface extends utils.Interface {
  functions: {
    "A()": FunctionFragment;
    "A_precise()": FunctionFragment;
    "add_liquidity(uint256[2],uint256)": FunctionFragment;
    "add_liquidity(uint256[2],uint256,address)": FunctionFragment;
    "admin_fee()": FunctionFragment;
    "apply_new_fee()": FunctionFragment;
    "balances(uint256)": FunctionFragment;
    "calc_token_amount(uint256,bool)": FunctionFragment;
    "coins(uint256)": FunctionFragment;
    "commit_new_fee(uint256)": FunctionFragment;
    "ema_price()": FunctionFragment;
    "exchange(int128,int128,uint256,uint256)": FunctionFragment;
    "exchange(int128,int128,uint256,uint256,address)": FunctionFragment;
    "factory()": FunctionFragment;
    "get_balances()": FunctionFragment;
    "get_dy(int128,int128,uint256)": FunctionFragment;
    "get_virtual_price()": FunctionFragment;
    "initialize(string,string,address[4],uint256[4],uint256,uint256)": FunctionFragment;
    "last_price()": FunctionFragment;
    "price_oracle()": FunctionFragment;
    "ramp_A(uint256,uint256)": FunctionFragment;
    "remove_liquidity(uint256,uint256[2],address)": FunctionFragment;
    "remove_liquidity(uint256,uint256[2])": FunctionFragment;
    "remove_liquidity_imbalance(uint256[2],uint256,address)": FunctionFragment;
    "remove_liquidity_imbalance(uint256[2],uint256)": FunctionFragment;
    "remove_liquidity_one_coin(uint256,int128,uint256,address)": FunctionFragment;
    "remove_liquidity_one_coin(uint256,int128,uint256)": FunctionFragment;
    "set_ma_exp_time(uint256)": FunctionFragment;
    "stop_ramp_A()": FunctionFragment;
    "withdraw_admin_fees()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "A"
      | "A_precise"
      | "add_liquidity(uint256[2],uint256)"
      | "add_liquidity(uint256[2],uint256,address)"
      | "admin_fee"
      | "apply_new_fee"
      | "balances"
      | "calc_token_amount"
      | "coins"
      | "commit_new_fee"
      | "ema_price"
      | "exchange(int128,int128,uint256,uint256)"
      | "exchange(int128,int128,uint256,uint256,address)"
      | "factory"
      | "get_balances"
      | "get_dy"
      | "get_virtual_price"
      | "initialize"
      | "last_price"
      | "price_oracle"
      | "ramp_A"
      | "remove_liquidity(uint256,uint256[2],address)"
      | "remove_liquidity(uint256,uint256[2])"
      | "remove_liquidity_imbalance(uint256[2],uint256,address)"
      | "remove_liquidity_imbalance(uint256[2],uint256)"
      | "remove_liquidity_one_coin(uint256,int128,uint256,address)"
      | "remove_liquidity_one_coin(uint256,int128,uint256)"
      | "set_ma_exp_time"
      | "stop_ramp_A"
      | "withdraw_admin_fees"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "A", values?: undefined): string;
  encodeFunctionData(functionFragment: "A_precise", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "add_liquidity(uint256[2],uint256)",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "add_liquidity(uint256[2],uint256,address)",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "admin_fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "apply_new_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_token_amount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "coins",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "commit_new_fee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "ema_price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchange(int128,int128,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange(int128,int128,uint256,uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "get_balances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_dy",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "get_virtual_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "last_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "price_oracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ramp_A",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity(uint256,uint256[2],address)",
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity(uint256,uint256[2])",
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_imbalance(uint256[2],uint256,address)",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_imbalance(uint256[2],uint256)",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin(uint256,int128,uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin(uint256,int128,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "set_ma_exp_time",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stop_ramp_A",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_admin_fees",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "A", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "A_precise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "add_liquidity(uint256[2],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_liquidity(uint256[2],uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin_fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "apply_new_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calc_token_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commit_new_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ema_price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchange(int128,int128,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange(int128,int128,uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_dy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_virtual_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "last_price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "price_oracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ramp_A", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity(uint256,uint256[2],address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity(uint256,uint256[2])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_imbalance(uint256[2],uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_imbalance(uint256[2],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin(uint256,int128,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin(uint256,int128,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_ma_exp_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stop_ramp_A",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_admin_fees",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICurvePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICurvePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    A(overrides?: CallOverrides): Promise<[BigNumber]>;

    A_precise(overrides?: CallOverrides): Promise<[BigNumber]>;

    "add_liquidity(uint256[2],uint256)"(
      _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _min_mint_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "add_liquidity(uint256[2],uint256,address)"(
      _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _min_mint_amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    apply_new_fee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calc_token_amount(
      _amounts: PromiseOrValue<BigNumberish>,
      _is_deposit: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    coins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    commit_new_fee(
      _new_fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ema_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    "exchange(int128,int128,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      _dx: PromiseOrValue<BigNumberish>,
      _min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exchange(int128,int128,uint256,uint256,address)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      _dx: PromiseOrValue<BigNumberish>,
      _min_dy: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    get_balances(overrides?: CallOverrides): Promise<[[BigNumber, BigNumber]]>;

    get_dy(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get_virtual_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coins: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _rate_multipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _A: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    last_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    price_oracle(overrides?: CallOverrides): Promise<[BigNumber]>;

    ramp_A(
      _future_A: PromiseOrValue<BigNumberish>,
      _future_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "remove_liquidity(uint256,uint256[2],address)"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "remove_liquidity(uint256,uint256[2])"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "remove_liquidity_imbalance(uint256[2],uint256,address)"(
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _max_burn_amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _max_burn_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256,address)"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      _min_received: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      _min_received: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_ma_exp_time(
      _ma_exp_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stop_ramp_A(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw_admin_fees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  A(overrides?: CallOverrides): Promise<BigNumber>;

  A_precise(overrides?: CallOverrides): Promise<BigNumber>;

  "add_liquidity(uint256[2],uint256)"(
    _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _min_mint_amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "add_liquidity(uint256[2],uint256,address)"(
    _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _min_mint_amount: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

  apply_new_fee(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balances(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calc_token_amount(
    _amounts: PromiseOrValue<BigNumberish>,
    _is_deposit: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  coins(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  commit_new_fee(
    _new_fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ema_price(overrides?: CallOverrides): Promise<BigNumber>;

  "exchange(int128,int128,uint256,uint256)"(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    _dx: PromiseOrValue<BigNumberish>,
    _min_dy: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exchange(int128,int128,uint256,uint256,address)"(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    _dx: PromiseOrValue<BigNumberish>,
    _min_dy: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  get_balances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  get_dy(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _coins: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    _rate_multipliers: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _A: PromiseOrValue<BigNumberish>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  last_price(overrides?: CallOverrides): Promise<BigNumber>;

  price_oracle(overrides?: CallOverrides): Promise<BigNumber>;

  ramp_A(
    _future_A: PromiseOrValue<BigNumberish>,
    _future_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "remove_liquidity(uint256,uint256[2],address)"(
    _burn_amount: PromiseOrValue<BigNumberish>,
    _min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "remove_liquidity(uint256,uint256[2])"(
    _burn_amount: PromiseOrValue<BigNumberish>,
    _min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "remove_liquidity_imbalance(uint256[2],uint256,address)"(
    _min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _max_burn_amount: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "remove_liquidity_imbalance(uint256[2],uint256)"(
    _min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _max_burn_amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "remove_liquidity_one_coin(uint256,int128,uint256,address)"(
    _burn_amount: PromiseOrValue<BigNumberish>,
    i: PromiseOrValue<BigNumberish>,
    _min_received: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "remove_liquidity_one_coin(uint256,int128,uint256)"(
    _burn_amount: PromiseOrValue<BigNumberish>,
    i: PromiseOrValue<BigNumberish>,
    _min_received: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_ma_exp_time(
    _ma_exp_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stop_ramp_A(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw_admin_fees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    A(overrides?: CallOverrides): Promise<BigNumber>;

    A_precise(overrides?: CallOverrides): Promise<BigNumber>;

    "add_liquidity(uint256[2],uint256)"(
      _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _min_mint_amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "add_liquidity(uint256[2],uint256,address)"(
      _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _min_mint_amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    apply_new_fee(overrides?: CallOverrides): Promise<void>;

    balances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calc_token_amount(
      _amounts: PromiseOrValue<BigNumberish>,
      _is_deposit: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    commit_new_fee(
      _new_fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ema_price(overrides?: CallOverrides): Promise<BigNumber>;

    "exchange(int128,int128,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      _dx: PromiseOrValue<BigNumberish>,
      _min_dy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "exchange(int128,int128,uint256,uint256,address)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      _dx: PromiseOrValue<BigNumberish>,
      _min_dy: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    get_balances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    get_dy(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coins: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _rate_multipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _A: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    last_price(overrides?: CallOverrides): Promise<BigNumber>;

    price_oracle(overrides?: CallOverrides): Promise<BigNumber>;

    ramp_A(
      _future_A: PromiseOrValue<BigNumberish>,
      _future_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity(uint256,uint256[2],address)"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity(uint256,uint256[2])"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity_imbalance(uint256[2],uint256,address)"(
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _max_burn_amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _max_burn_amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity_one_coin(uint256,int128,uint256,address)"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      _min_received: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      _min_received: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_ma_exp_time(
      _ma_exp_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stop_ramp_A(overrides?: CallOverrides): Promise<void>;

    withdraw_admin_fees(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    A(overrides?: CallOverrides): Promise<BigNumber>;

    A_precise(overrides?: CallOverrides): Promise<BigNumber>;

    "add_liquidity(uint256[2],uint256)"(
      _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _min_mint_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "add_liquidity(uint256[2],uint256,address)"(
      _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _min_mint_amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    apply_new_fee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calc_token_amount(
      _amounts: PromiseOrValue<BigNumberish>,
      _is_deposit: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commit_new_fee(
      _new_fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ema_price(overrides?: CallOverrides): Promise<BigNumber>;

    "exchange(int128,int128,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      _dx: PromiseOrValue<BigNumberish>,
      _min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exchange(int128,int128,uint256,uint256,address)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      _dx: PromiseOrValue<BigNumberish>,
      _min_dy: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    get_balances(overrides?: CallOverrides): Promise<BigNumber>;

    get_dy(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coins: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _rate_multipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _A: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    last_price(overrides?: CallOverrides): Promise<BigNumber>;

    price_oracle(overrides?: CallOverrides): Promise<BigNumber>;

    ramp_A(
      _future_A: PromiseOrValue<BigNumberish>,
      _future_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[2],address)"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[2])"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "remove_liquidity_imbalance(uint256[2],uint256,address)"(
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _max_burn_amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _max_burn_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "remove_liquidity_one_coin(uint256,int128,uint256,address)"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      _min_received: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      _min_received: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_ma_exp_time(
      _ma_exp_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stop_ramp_A(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw_admin_fees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    A_precise(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "add_liquidity(uint256[2],uint256)"(
      _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _min_mint_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "add_liquidity(uint256[2],uint256,address)"(
      _amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _min_mint_amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apply_new_fee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calc_token_amount(
      _amounts: PromiseOrValue<BigNumberish>,
      _is_deposit: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commit_new_fee(
      _new_fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ema_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exchange(int128,int128,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      _dx: PromiseOrValue<BigNumberish>,
      _min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exchange(int128,int128,uint256,uint256,address)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      _dx: PromiseOrValue<BigNumberish>,
      _min_dy: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_balances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_dy(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_virtual_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coins: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _rate_multipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _A: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    last_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price_oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ramp_A(
      _future_A: PromiseOrValue<BigNumberish>,
      _future_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "remove_liquidity(uint256,uint256[2],address)"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "remove_liquidity(uint256,uint256[2])"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_imbalance(uint256[2],uint256,address)"(
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _max_burn_amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      _min_amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _max_burn_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256,address)"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      _min_received: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      _burn_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      _min_received: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_ma_exp_time(
      _ma_exp_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stop_ramp_A(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw_admin_fees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
