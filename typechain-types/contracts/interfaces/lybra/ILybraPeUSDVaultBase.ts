/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ILybraPeUSDVaultBaseInterface extends utils.Interface {
  functions: {
    "burn(address,uint256)": FunctionFragment;
    "depositAssetToMint(uint256,uint256)": FunctionFragment;
    "depositedAsset(address)": FunctionFragment;
    "getAsset()": FunctionFragment;
    "getAsset2EtherExchangeRate()": FunctionFragment;
    "getAssetPrice()": FunctionFragment;
    "getBorrowedOf(address)": FunctionFragment;
    "getPoolTotalCirculation()": FunctionFragment;
    "getVaultType()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burn"
      | "depositAssetToMint"
      | "depositedAsset"
      | "getAsset"
      | "getAsset2EtherExchangeRate"
      | "getAssetPrice"
      | "getBorrowedOf"
      | "getPoolTotalCirculation"
      | "getVaultType"
      | "mint"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAssetToMint",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositedAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAsset2EtherExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolTotalCirculation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAssetToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAsset2EtherExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowedOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolTotalCirculation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface ILybraPeUSDVaultBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILybraPeUSDVaultBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burn(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAssetToMint(
      assetAmount: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositedAsset(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAsset(overrides?: CallOverrides): Promise<[string]>;

    getAsset2EtherExchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAssetPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowedOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolTotalCirculation(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVaultType(overrides?: CallOverrides): Promise<[number]>;

    mint(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  burn(
    onBehalfOf: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAssetToMint(
    assetAmount: PromiseOrValue<BigNumberish>,
    mintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositedAsset(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAsset(overrides?: CallOverrides): Promise<string>;

  getAsset2EtherExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  getAssetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowedOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolTotalCirculation(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultType(overrides?: CallOverrides): Promise<number>;

  mint(
    onBehalfOf: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    onBehalfOf: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burn(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAssetToMint(
      assetAmount: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositedAsset(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAsset(overrides?: CallOverrides): Promise<string>;

    getAsset2EtherExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowedOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolTotalCirculation(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultType(overrides?: CallOverrides): Promise<number>;

    mint(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    burn(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAssetToMint(
      assetAmount: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositedAsset(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAsset(overrides?: CallOverrides): Promise<BigNumber>;

    getAsset2EtherExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowedOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolTotalCirculation(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultType(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAssetToMint(
      assetAmount: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositedAsset(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAsset2EtherExchangeRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowedOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolTotalCirculation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
