/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IconfiguratorInterface extends utils.Interface {
  functions: {
    "becomeRedemptionProvider(bool)": FunctionFragment;
    "distributeRewards()": FunctionFragment;
    "eUSDMiningIncentives()": FunctionFragment;
    "flashloanFee()": FunctionFragment;
    "getBadCollateralRatio(address)": FunctionFragment;
    "getEUSDAddress()": FunctionFragment;
    "getEUSDMaxLocked()": FunctionFragment;
    "getProtocolRewardsPool()": FunctionFragment;
    "getSafeCollateralRatio(address)": FunctionFragment;
    "getVaultWeight(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isRedemptionProvider(address)": FunctionFragment;
    "mintVault(address)": FunctionFragment;
    "mintVaultMaxSupply(address)": FunctionFragment;
    "peUSD()": FunctionFragment;
    "redemptionFee()": FunctionFragment;
    "refreshMintReward(address)": FunctionFragment;
    "setMintVaultMaxSupply(address,uint256)": FunctionFragment;
    "stableToken()": FunctionFragment;
    "tokenMiner(address)": FunctionFragment;
    "vaultBurnPaused(address)": FunctionFragment;
    "vaultKeeperRatio(address)": FunctionFragment;
    "vaultMintFeeApy(address)": FunctionFragment;
    "vaultMintPaused(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "becomeRedemptionProvider"
      | "distributeRewards"
      | "eUSDMiningIncentives"
      | "flashloanFee"
      | "getBadCollateralRatio"
      | "getEUSDAddress"
      | "getEUSDMaxLocked"
      | "getProtocolRewardsPool"
      | "getSafeCollateralRatio"
      | "getVaultWeight"
      | "hasRole"
      | "isRedemptionProvider"
      | "mintVault"
      | "mintVaultMaxSupply"
      | "peUSD"
      | "redemptionFee"
      | "refreshMintReward"
      | "setMintVaultMaxSupply"
      | "stableToken"
      | "tokenMiner"
      | "vaultBurnPaused"
      | "vaultKeeperRatio"
      | "vaultMintFeeApy"
      | "vaultMintPaused"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "becomeRedemptionProvider",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eUSDMiningIncentives",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashloanFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBadCollateralRatio",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEUSDAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEUSDMaxLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolRewardsPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSafeCollateralRatio",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultWeight",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRedemptionProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVaultMaxSupply",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "peUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redemptionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refreshMintReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintVaultMaxSupply",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stableToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMiner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultBurnPaused",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultKeeperRatio",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultMintFeeApy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultMintPaused",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "becomeRedemptionProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eUSDMiningIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashloanFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEUSDAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEUSDMaxLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolRewardsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSafeCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRedemptionProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintVaultMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "peUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshMintReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintVaultMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenMiner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultBurnPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultKeeperRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultMintFeeApy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultMintPaused",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Iconfigurator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IconfiguratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    becomeRedemptionProvider(
      _bool: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eUSDMiningIncentives(overrides?: CallOverrides): Promise<[string]>;

    flashloanFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBadCollateralRatio(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEUSDAddress(overrides?: CallOverrides): Promise<[string]>;

    getEUSDMaxLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProtocolRewardsPool(overrides?: CallOverrides): Promise<[string]>;

    getSafeCollateralRatio(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultWeight(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRedemptionProvider(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintVault(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintVaultMaxSupply(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    peUSD(overrides?: CallOverrides): Promise<[string]>;

    redemptionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    refreshMintReward(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMintVaultMaxSupply(
      pool: PromiseOrValue<string>,
      maxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stableToken(overrides?: CallOverrides): Promise<[string]>;

    tokenMiner(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vaultBurnPaused(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vaultKeeperRatio(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultMintFeeApy(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultMintPaused(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  becomeRedemptionProvider(
    _bool: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eUSDMiningIncentives(overrides?: CallOverrides): Promise<string>;

  flashloanFee(overrides?: CallOverrides): Promise<BigNumber>;

  getBadCollateralRatio(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEUSDAddress(overrides?: CallOverrides): Promise<string>;

  getEUSDMaxLocked(overrides?: CallOverrides): Promise<BigNumber>;

  getProtocolRewardsPool(overrides?: CallOverrides): Promise<string>;

  getSafeCollateralRatio(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultWeight(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRedemptionProvider(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintVault(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintVaultMaxSupply(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  peUSD(overrides?: CallOverrides): Promise<string>;

  redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

  refreshMintReward(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMintVaultMaxSupply(
    pool: PromiseOrValue<string>,
    maxSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stableToken(overrides?: CallOverrides): Promise<string>;

  tokenMiner(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vaultBurnPaused(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vaultKeeperRatio(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultMintFeeApy(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultMintPaused(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    becomeRedemptionProvider(
      _bool: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeRewards(overrides?: CallOverrides): Promise<void>;

    eUSDMiningIncentives(overrides?: CallOverrides): Promise<string>;

    flashloanFee(overrides?: CallOverrides): Promise<BigNumber>;

    getBadCollateralRatio(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEUSDAddress(overrides?: CallOverrides): Promise<string>;

    getEUSDMaxLocked(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolRewardsPool(overrides?: CallOverrides): Promise<string>;

    getSafeCollateralRatio(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultWeight(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRedemptionProvider(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintVault(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintVaultMaxSupply(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    peUSD(overrides?: CallOverrides): Promise<string>;

    redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    refreshMintReward(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintVaultMaxSupply(
      pool: PromiseOrValue<string>,
      maxSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stableToken(overrides?: CallOverrides): Promise<string>;

    tokenMiner(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vaultBurnPaused(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vaultKeeperRatio(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultMintFeeApy(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultMintPaused(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    becomeRedemptionProvider(
      _bool: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eUSDMiningIncentives(overrides?: CallOverrides): Promise<BigNumber>;

    flashloanFee(overrides?: CallOverrides): Promise<BigNumber>;

    getBadCollateralRatio(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEUSDAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getEUSDMaxLocked(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolRewardsPool(overrides?: CallOverrides): Promise<BigNumber>;

    getSafeCollateralRatio(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultWeight(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRedemptionProvider(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintVault(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintVaultMaxSupply(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    peUSD(overrides?: CallOverrides): Promise<BigNumber>;

    redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    refreshMintReward(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMintVaultMaxSupply(
      pool: PromiseOrValue<string>,
      maxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stableToken(overrides?: CallOverrides): Promise<BigNumber>;

    tokenMiner(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultBurnPaused(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultKeeperRatio(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultMintFeeApy(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultMintPaused(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    becomeRedemptionProvider(
      _bool: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eUSDMiningIncentives(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashloanFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBadCollateralRatio(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEUSDAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEUSDMaxLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolRewardsPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSafeCollateralRatio(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultWeight(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRedemptionProvider(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintVault(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintVaultMaxSupply(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    peUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemptionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refreshMintReward(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMintVaultMaxSupply(
      pool: PromiseOrValue<string>,
      maxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stableToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenMiner(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultBurnPaused(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultKeeperRatio(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultMintFeeApy(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultMintPaused(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
