/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IUiIncentiveDataProvider {
  export type RewardInfoStruct = {
    rewardTokenSymbol: PromiseOrValue<string>;
    rewardTokenAddress: PromiseOrValue<string>;
    rewardOracleAddress: PromiseOrValue<string>;
    emissionPerSecond: PromiseOrValue<BigNumberish>;
    incentivesLastUpdateTimestamp: PromiseOrValue<BigNumberish>;
    tokenIncentivesIndex: PromiseOrValue<BigNumberish>;
    emissionEndTimestamp: PromiseOrValue<BigNumberish>;
    rewardPriceFeed: PromiseOrValue<BigNumberish>;
    rewardTokenDecimals: PromiseOrValue<BigNumberish>;
    precision: PromiseOrValue<BigNumberish>;
    priceFeedDecimals: PromiseOrValue<BigNumberish>;
  };

  export type RewardInfoStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number
  ] & {
    rewardTokenSymbol: string;
    rewardTokenAddress: string;
    rewardOracleAddress: string;
    emissionPerSecond: BigNumber;
    incentivesLastUpdateTimestamp: BigNumber;
    tokenIncentivesIndex: BigNumber;
    emissionEndTimestamp: BigNumber;
    rewardPriceFeed: BigNumber;
    rewardTokenDecimals: number;
    precision: number;
    priceFeedDecimals: number;
  };

  export type IncentiveDataStruct = {
    tokenAddress: PromiseOrValue<string>;
    incentiveControllerAddress: PromiseOrValue<string>;
    rewardsTokenInformation: IUiIncentiveDataProvider.RewardInfoStruct[];
  };

  export type IncentiveDataStructOutput = [
    string,
    string,
    IUiIncentiveDataProvider.RewardInfoStructOutput[]
  ] & {
    tokenAddress: string;
    incentiveControllerAddress: string;
    rewardsTokenInformation: IUiIncentiveDataProvider.RewardInfoStructOutput[];
  };

  export type AggregatedReserveIncentiveDataStruct = {
    underlyingAsset: PromiseOrValue<string>;
    aIncentiveData: IUiIncentiveDataProvider.IncentiveDataStruct;
    vIncentiveData: IUiIncentiveDataProvider.IncentiveDataStruct;
    sIncentiveData: IUiIncentiveDataProvider.IncentiveDataStruct;
  };

  export type AggregatedReserveIncentiveDataStructOutput = [
    string,
    IUiIncentiveDataProvider.IncentiveDataStructOutput,
    IUiIncentiveDataProvider.IncentiveDataStructOutput,
    IUiIncentiveDataProvider.IncentiveDataStructOutput
  ] & {
    underlyingAsset: string;
    aIncentiveData: IUiIncentiveDataProvider.IncentiveDataStructOutput;
    vIncentiveData: IUiIncentiveDataProvider.IncentiveDataStructOutput;
    sIncentiveData: IUiIncentiveDataProvider.IncentiveDataStructOutput;
  };

  export type UserRewardInfoStruct = {
    rewardTokenSymbol: PromiseOrValue<string>;
    rewardOracleAddress: PromiseOrValue<string>;
    rewardTokenAddress: PromiseOrValue<string>;
    userUnclaimedRewards: PromiseOrValue<BigNumberish>;
    tokenIncentivesUserIndex: PromiseOrValue<BigNumberish>;
    rewardPriceFeed: PromiseOrValue<BigNumberish>;
    priceFeedDecimals: PromiseOrValue<BigNumberish>;
    rewardTokenDecimals: PromiseOrValue<BigNumberish>;
  };

  export type UserRewardInfoStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    rewardTokenSymbol: string;
    rewardOracleAddress: string;
    rewardTokenAddress: string;
    userUnclaimedRewards: BigNumber;
    tokenIncentivesUserIndex: BigNumber;
    rewardPriceFeed: BigNumber;
    priceFeedDecimals: number;
    rewardTokenDecimals: number;
  };

  export type UserIncentiveDataStruct = {
    tokenAddress: PromiseOrValue<string>;
    incentiveControllerAddress: PromiseOrValue<string>;
    userRewardsInformation: IUiIncentiveDataProvider.UserRewardInfoStruct[];
  };

  export type UserIncentiveDataStructOutput = [
    string,
    string,
    IUiIncentiveDataProvider.UserRewardInfoStructOutput[]
  ] & {
    tokenAddress: string;
    incentiveControllerAddress: string;
    userRewardsInformation: IUiIncentiveDataProvider.UserRewardInfoStructOutput[];
  };

  export type UserReserveIncentiveDataStruct = {
    underlyingAsset: PromiseOrValue<string>;
    aTokenIncentivesUserData: IUiIncentiveDataProvider.UserIncentiveDataStruct;
    vTokenIncentivesUserData: IUiIncentiveDataProvider.UserIncentiveDataStruct;
    sTokenIncentivesUserData: IUiIncentiveDataProvider.UserIncentiveDataStruct;
  };

  export type UserReserveIncentiveDataStructOutput = [
    string,
    IUiIncentiveDataProvider.UserIncentiveDataStructOutput,
    IUiIncentiveDataProvider.UserIncentiveDataStructOutput,
    IUiIncentiveDataProvider.UserIncentiveDataStructOutput
  ] & {
    underlyingAsset: string;
    aTokenIncentivesUserData: IUiIncentiveDataProvider.UserIncentiveDataStructOutput;
    vTokenIncentivesUserData: IUiIncentiveDataProvider.UserIncentiveDataStructOutput;
    sTokenIncentivesUserData: IUiIncentiveDataProvider.UserIncentiveDataStructOutput;
  };
}

export interface IUiIncentiveDataProviderInterface extends utils.Interface {
  functions: {
    "getFullReservesIncentiveData(address,address)": FunctionFragment;
    "getReservesIncentivesData(address)": FunctionFragment;
    "getUserReservesIncentivesData(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getFullReservesIncentiveData"
      | "getReservesIncentivesData"
      | "getUserReservesIncentivesData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFullReservesIncentiveData",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservesIncentivesData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReservesIncentivesData",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFullReservesIncentiveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservesIncentivesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReservesIncentivesData",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IUiIncentiveDataProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUiIncentiveDataProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFullReservesIncentiveData(
      provider: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        IUiIncentiveDataProvider.AggregatedReserveIncentiveDataStructOutput[],
        IUiIncentiveDataProvider.UserReserveIncentiveDataStructOutput[]
      ]
    >;

    getReservesIncentivesData(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IUiIncentiveDataProvider.AggregatedReserveIncentiveDataStructOutput[]]
    >;

    getUserReservesIncentivesData(
      provider: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IUiIncentiveDataProvider.UserReserveIncentiveDataStructOutput[]]
    >;
  };

  getFullReservesIncentiveData(
    provider: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      IUiIncentiveDataProvider.AggregatedReserveIncentiveDataStructOutput[],
      IUiIncentiveDataProvider.UserReserveIncentiveDataStructOutput[]
    ]
  >;

  getReservesIncentivesData(
    provider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    IUiIncentiveDataProvider.AggregatedReserveIncentiveDataStructOutput[]
  >;

  getUserReservesIncentivesData(
    provider: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IUiIncentiveDataProvider.UserReserveIncentiveDataStructOutput[]>;

  callStatic: {
    getFullReservesIncentiveData(
      provider: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        IUiIncentiveDataProvider.AggregatedReserveIncentiveDataStructOutput[],
        IUiIncentiveDataProvider.UserReserveIncentiveDataStructOutput[]
      ]
    >;

    getReservesIncentivesData(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      IUiIncentiveDataProvider.AggregatedReserveIncentiveDataStructOutput[]
    >;

    getUserReservesIncentivesData(
      provider: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IUiIncentiveDataProvider.UserReserveIncentiveDataStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    getFullReservesIncentiveData(
      provider: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservesIncentivesData(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReservesIncentivesData(
      provider: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFullReservesIncentiveData(
      provider: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservesIncentivesData(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReservesIncentivesData(
      provider: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
