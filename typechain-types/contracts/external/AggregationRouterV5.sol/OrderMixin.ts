/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace OrderLib {
  export type OrderStruct = {
    salt: PromiseOrValue<BigNumberish>;
    makerAsset: PromiseOrValue<string>;
    takerAsset: PromiseOrValue<string>;
    maker: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    allowedSender: PromiseOrValue<string>;
    makingAmount: PromiseOrValue<BigNumberish>;
    takingAmount: PromiseOrValue<BigNumberish>;
    offsets: PromiseOrValue<BigNumberish>;
    interactions: PromiseOrValue<BytesLike>;
  };

  export type OrderStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    salt: BigNumber;
    makerAsset: string;
    takerAsset: string;
    maker: string;
    receiver: string;
    allowedSender: string;
    makingAmount: BigNumber;
    takingAmount: BigNumber;
    offsets: BigNumber;
    interactions: string;
  };
}

export interface OrderMixinInterface extends utils.Interface {
  functions: {
    "advanceNonce(uint8)": FunctionFragment;
    "and(uint256,bytes)": FunctionFragment;
    "arbitraryStaticCall(address,bytes)": FunctionFragment;
    "cancelOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "checkPredicate((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "eq(uint256,bytes)": FunctionFragment;
    "fillOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256)": FunctionFragment;
    "fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address)": FunctionFragment;
    "fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address,bytes)": FunctionFragment;
    "gt(uint256,bytes)": FunctionFragment;
    "hashOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "increaseNonce()": FunctionFragment;
    "lt(uint256,bytes)": FunctionFragment;
    "nonce(address)": FunctionFragment;
    "nonceEquals(address,uint256)": FunctionFragment;
    "or(uint256,bytes)": FunctionFragment;
    "remaining(bytes32)": FunctionFragment;
    "remainingRaw(bytes32)": FunctionFragment;
    "remainingsRaw(bytes32[])": FunctionFragment;
    "simulate(address,bytes)": FunctionFragment;
    "timestampBelow(uint256)": FunctionFragment;
    "timestampBelowAndNonceEquals(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "advanceNonce"
      | "and"
      | "arbitraryStaticCall"
      | "cancelOrder"
      | "checkPredicate"
      | "eq"
      | "fillOrder"
      | "fillOrderTo"
      | "fillOrderToWithPermit"
      | "gt"
      | "hashOrder"
      | "increaseNonce"
      | "lt"
      | "nonce"
      | "nonceEquals"
      | "or"
      | "remaining"
      | "remainingRaw"
      | "remainingsRaw"
      | "simulate"
      | "timestampBelow"
      | "timestampBelowAndNonceEquals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "advanceNonce",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "and",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitraryStaticCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [OrderLib.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPredicate",
    values: [OrderLib.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "eq",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [
      OrderLib.OrderStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderTo",
    values: [
      OrderLib.OrderStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderToWithPermit",
    values: [
      OrderLib.OrderStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder",
    values: [OrderLib.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceEquals",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "or",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "remaining",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingRaw",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingsRaw",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "simulate",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "timestampBelow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timestampBelowAndNonceEquals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "advanceNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "and", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arbitraryStaticCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPredicate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eq", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderToWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonceEquals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "or", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remaining", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingsRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timestampBelow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampBelowAndNonceEquals",
    data: BytesLike
  ): Result;

  events: {
    "NonceIncreased(address,uint256)": EventFragment;
    "OrderCanceled(address,bytes32,uint256)": EventFragment;
    "OrderFilled(address,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NonceIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFilled"): EventFragment;
}

export interface NonceIncreasedEventObject {
  maker: string;
  newNonce: BigNumber;
}
export type NonceIncreasedEvent = TypedEvent<
  [string, BigNumber],
  NonceIncreasedEventObject
>;

export type NonceIncreasedEventFilter = TypedEventFilter<NonceIncreasedEvent>;

export interface OrderCanceledEventObject {
  maker: string;
  orderHash: string;
  remainingRaw: BigNumber;
}
export type OrderCanceledEvent = TypedEvent<
  [string, string, BigNumber],
  OrderCanceledEventObject
>;

export type OrderCanceledEventFilter = TypedEventFilter<OrderCanceledEvent>;

export interface OrderFilledEventObject {
  maker: string;
  orderHash: string;
  remaining: BigNumber;
}
export type OrderFilledEvent = TypedEvent<
  [string, string, BigNumber],
  OrderFilledEventObject
>;

export type OrderFilledEventFilter = TypedEventFilter<OrderFilledEvent>;

export interface OrderMixin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderMixinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    advanceNonce(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    and(
      offsets: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    arbitraryStaticCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelOrder(
      order: OrderLib.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkPredicate(
      order: OrderLib.OrderStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    eq(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fillOrder(
      order: OrderLib.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      interaction: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      takingAmount: PromiseOrValue<BigNumberish>,
      skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillOrderTo(
      order_: OrderLib.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      interaction: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      takingAmount: PromiseOrValue<BigNumberish>,
      skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillOrderToWithPermit(
      order: OrderLib.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      interaction: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      takingAmount: PromiseOrValue<BigNumberish>,
      skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      permit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gt(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hashOrder(
      order: OrderLib.OrderStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    increaseNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lt(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nonceEquals(
      makerAddress: PromiseOrValue<string>,
      makerNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    or(
      offsets: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    remaining(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    remainingRaw(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    remainingsRaw(
      orderHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    simulate(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timestampBelow(
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    timestampBelowAndNonceEquals(
      timeNonceAccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  advanceNonce(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  and(
    offsets: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  arbitraryStaticCall(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelOrder(
    order: OrderLib.OrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkPredicate(
    order: OrderLib.OrderStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  eq(
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  fillOrder(
    order: OrderLib.OrderStruct,
    signature: PromiseOrValue<BytesLike>,
    interaction: PromiseOrValue<BytesLike>,
    makingAmount: PromiseOrValue<BigNumberish>,
    takingAmount: PromiseOrValue<BigNumberish>,
    skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillOrderTo(
    order_: OrderLib.OrderStruct,
    signature: PromiseOrValue<BytesLike>,
    interaction: PromiseOrValue<BytesLike>,
    makingAmount: PromiseOrValue<BigNumberish>,
    takingAmount: PromiseOrValue<BigNumberish>,
    skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillOrderToWithPermit(
    order: OrderLib.OrderStruct,
    signature: PromiseOrValue<BytesLike>,
    interaction: PromiseOrValue<BytesLike>,
    makingAmount: PromiseOrValue<BigNumberish>,
    takingAmount: PromiseOrValue<BigNumberish>,
    skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    permit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gt(
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashOrder(
    order: OrderLib.OrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  increaseNonce(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lt(
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonce(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonceEquals(
    makerAddress: PromiseOrValue<string>,
    makerNonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  or(
    offsets: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  remaining(
    orderHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  remainingRaw(
    orderHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  remainingsRaw(
    orderHashes: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  simulate(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timestampBelow(
    time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  timestampBelowAndNonceEquals(
    timeNonceAccount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    advanceNonce(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    and(
      offsets: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    arbitraryStaticCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      order: OrderLib.OrderStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { orderRemaining: BigNumber; orderHash: string }
    >;

    checkPredicate(
      order: OrderLib.OrderStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    eq(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fillOrder(
      order: OrderLib.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      interaction: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      takingAmount: PromiseOrValue<BigNumberish>,
      skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    fillOrderTo(
      order_: OrderLib.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      interaction: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      takingAmount: PromiseOrValue<BigNumberish>,
      skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        actualMakingAmount: BigNumber;
        actualTakingAmount: BigNumber;
        orderHash: string;
      }
    >;

    fillOrderToWithPermit(
      order: OrderLib.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      interaction: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      takingAmount: PromiseOrValue<BigNumberish>,
      skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      permit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    gt(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashOrder(
      order: OrderLib.OrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    increaseNonce(overrides?: CallOverrides): Promise<void>;

    lt(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonceEquals(
      makerAddress: PromiseOrValue<string>,
      makerNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    or(
      offsets: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    remaining(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remainingRaw(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remainingsRaw(
      orderHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    simulate(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    timestampBelow(
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timestampBelowAndNonceEquals(
      timeNonceAccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NonceIncreased(address,uint256)"(
      maker?: PromiseOrValue<string> | null,
      newNonce?: null
    ): NonceIncreasedEventFilter;
    NonceIncreased(
      maker?: PromiseOrValue<string> | null,
      newNonce?: null
    ): NonceIncreasedEventFilter;

    "OrderCanceled(address,bytes32,uint256)"(
      maker?: PromiseOrValue<string> | null,
      orderHash?: null,
      remainingRaw?: null
    ): OrderCanceledEventFilter;
    OrderCanceled(
      maker?: PromiseOrValue<string> | null,
      orderHash?: null,
      remainingRaw?: null
    ): OrderCanceledEventFilter;

    "OrderFilled(address,bytes32,uint256)"(
      maker?: PromiseOrValue<string> | null,
      orderHash?: null,
      remaining?: null
    ): OrderFilledEventFilter;
    OrderFilled(
      maker?: PromiseOrValue<string> | null,
      orderHash?: null,
      remaining?: null
    ): OrderFilledEventFilter;
  };

  estimateGas: {
    advanceNonce(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    and(
      offsets: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    arbitraryStaticCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      order: OrderLib.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkPredicate(
      order: OrderLib.OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eq(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillOrder(
      order: OrderLib.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      interaction: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      takingAmount: PromiseOrValue<BigNumberish>,
      skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillOrderTo(
      order_: OrderLib.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      interaction: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      takingAmount: PromiseOrValue<BigNumberish>,
      skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillOrderToWithPermit(
      order: OrderLib.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      interaction: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      takingAmount: PromiseOrValue<BigNumberish>,
      skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      permit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gt(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOrder(
      order: OrderLib.OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lt(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonceEquals(
      makerAddress: PromiseOrValue<string>,
      makerNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    or(
      offsets: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remaining(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remainingRaw(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remainingsRaw(
      orderHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simulate(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timestampBelow(
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timestampBelowAndNonceEquals(
      timeNonceAccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    advanceNonce(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    and(
      offsets: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    arbitraryStaticCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      order: OrderLib.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkPredicate(
      order: OrderLib.OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eq(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fillOrder(
      order: OrderLib.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      interaction: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      takingAmount: PromiseOrValue<BigNumberish>,
      skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillOrderTo(
      order_: OrderLib.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      interaction: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      takingAmount: PromiseOrValue<BigNumberish>,
      skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillOrderToWithPermit(
      order: OrderLib.OrderStruct,
      signature: PromiseOrValue<BytesLike>,
      interaction: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      takingAmount: PromiseOrValue<BigNumberish>,
      skipPermitAndThresholdAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      permit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gt(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOrder(
      order: OrderLib.OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lt(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonceEquals(
      makerAddress: PromiseOrValue<string>,
      makerNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    or(
      offsets: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remaining(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remainingRaw(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remainingsRaw(
      orderHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    simulate(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timestampBelow(
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timestampBelowAndNonceEquals(
      timeNonceAccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
