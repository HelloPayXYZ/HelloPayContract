/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface UnoswapV3RouterInterface extends utils.Interface {
  functions: {
    "uniswapV3Swap(uint256,uint256,uint256[])": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "uniswapV3SwapTo(address,uint256,uint256,uint256[])": FunctionFragment;
    "uniswapV3SwapToWithPermit(address,address,uint256,uint256,uint256[],bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "uniswapV3Swap"
      | "uniswapV3SwapCallback"
      | "uniswapV3SwapTo"
      | "uniswapV3SwapToWithPermit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "uniswapV3Swap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapToWithPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "uniswapV3Swap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapToWithPermit",
    data: BytesLike
  ): Result;

  events: {};
}

export interface UnoswapV3Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UnoswapV3RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    uniswapV3Swap(
      amount: PromiseOrValue<BigNumberish>,
      minReturn: PromiseOrValue<BigNumberish>,
      pools: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapTo(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      minReturn: PromiseOrValue<BigNumberish>,
      pools: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapToWithPermit(
      recipient: PromiseOrValue<string>,
      srcToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      minReturn: PromiseOrValue<BigNumberish>,
      pools: PromiseOrValue<BigNumberish>[],
      permit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  uniswapV3Swap(
    amount: PromiseOrValue<BigNumberish>,
    minReturn: PromiseOrValue<BigNumberish>,
    pools: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: PromiseOrValue<BigNumberish>,
    amount1Delta: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapTo(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    minReturn: PromiseOrValue<BigNumberish>,
    pools: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapToWithPermit(
    recipient: PromiseOrValue<string>,
    srcToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    minReturn: PromiseOrValue<BigNumberish>,
    pools: PromiseOrValue<BigNumberish>[],
    permit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    uniswapV3Swap(
      amount: PromiseOrValue<BigNumberish>,
      minReturn: PromiseOrValue<BigNumberish>,
      pools: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapTo(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      minReturn: PromiseOrValue<BigNumberish>,
      pools: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapV3SwapToWithPermit(
      recipient: PromiseOrValue<string>,
      srcToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      minReturn: PromiseOrValue<BigNumberish>,
      pools: PromiseOrValue<BigNumberish>[],
      permit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    uniswapV3Swap(
      amount: PromiseOrValue<BigNumberish>,
      minReturn: PromiseOrValue<BigNumberish>,
      pools: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapTo(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      minReturn: PromiseOrValue<BigNumberish>,
      pools: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapToWithPermit(
      recipient: PromiseOrValue<string>,
      srcToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      minReturn: PromiseOrValue<BigNumberish>,
      pools: PromiseOrValue<BigNumberish>[],
      permit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    uniswapV3Swap(
      amount: PromiseOrValue<BigNumberish>,
      minReturn: PromiseOrValue<BigNumberish>,
      pools: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapTo(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      minReturn: PromiseOrValue<BigNumberish>,
      pools: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapToWithPermit(
      recipient: PromiseOrValue<string>,
      srcToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      minReturn: PromiseOrValue<BigNumberish>,
      pools: PromiseOrValue<BigNumberish>[],
      permit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
