/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IClipperExchangeInterface {
  export type SignatureStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SignatureStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };
}

export interface IClipperExchangeInterfaceInterface extends utils.Interface {
  functions: {
    "sellEthForToken(address,uint256,uint256,uint256,address,(uint8,bytes32,bytes32),bytes)": FunctionFragment;
    "sellTokenForEth(address,uint256,uint256,uint256,address,(uint8,bytes32,bytes32),bytes)": FunctionFragment;
    "swap(address,address,uint256,uint256,uint256,address,(uint8,bytes32,bytes32),bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "sellEthForToken" | "sellTokenForEth" | "swap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "sellEthForToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      IClipperExchangeInterface.SignatureStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokenForEth",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      IClipperExchangeInterface.SignatureStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      IClipperExchangeInterface.SignatureStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "sellEthForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokenForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export interface IClipperExchangeInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClipperExchangeInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    sellEthForToken(
      outputToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      goodUntil: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      theSignature: IClipperExchangeInterface.SignatureStruct,
      auxiliaryData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellTokenForEth(
      inputToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      goodUntil: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      theSignature: IClipperExchangeInterface.SignatureStruct,
      auxiliaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      inputToken: PromiseOrValue<string>,
      outputToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      goodUntil: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      theSignature: IClipperExchangeInterface.SignatureStruct,
      auxiliaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  sellEthForToken(
    outputToken: PromiseOrValue<string>,
    inputAmount: PromiseOrValue<BigNumberish>,
    outputAmount: PromiseOrValue<BigNumberish>,
    goodUntil: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    theSignature: IClipperExchangeInterface.SignatureStruct,
    auxiliaryData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellTokenForEth(
    inputToken: PromiseOrValue<string>,
    inputAmount: PromiseOrValue<BigNumberish>,
    outputAmount: PromiseOrValue<BigNumberish>,
    goodUntil: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    theSignature: IClipperExchangeInterface.SignatureStruct,
    auxiliaryData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    inputToken: PromiseOrValue<string>,
    outputToken: PromiseOrValue<string>,
    inputAmount: PromiseOrValue<BigNumberish>,
    outputAmount: PromiseOrValue<BigNumberish>,
    goodUntil: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    theSignature: IClipperExchangeInterface.SignatureStruct,
    auxiliaryData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    sellEthForToken(
      outputToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      goodUntil: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      theSignature: IClipperExchangeInterface.SignatureStruct,
      auxiliaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sellTokenForEth(
      inputToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      goodUntil: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      theSignature: IClipperExchangeInterface.SignatureStruct,
      auxiliaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      inputToken: PromiseOrValue<string>,
      outputToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      goodUntil: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      theSignature: IClipperExchangeInterface.SignatureStruct,
      auxiliaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    sellEthForToken(
      outputToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      goodUntil: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      theSignature: IClipperExchangeInterface.SignatureStruct,
      auxiliaryData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellTokenForEth(
      inputToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      goodUntil: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      theSignature: IClipperExchangeInterface.SignatureStruct,
      auxiliaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      inputToken: PromiseOrValue<string>,
      outputToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      goodUntil: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      theSignature: IClipperExchangeInterface.SignatureStruct,
      auxiliaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    sellEthForToken(
      outputToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      goodUntil: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      theSignature: IClipperExchangeInterface.SignatureStruct,
      auxiliaryData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellTokenForEth(
      inputToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      goodUntil: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      theSignature: IClipperExchangeInterface.SignatureStruct,
      auxiliaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      inputToken: PromiseOrValue<string>,
      outputToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      goodUntil: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      theSignature: IClipperExchangeInterface.SignatureStruct,
      auxiliaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
