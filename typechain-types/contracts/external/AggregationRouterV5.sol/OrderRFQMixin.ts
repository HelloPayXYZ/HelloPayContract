/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace OrderRFQLib {
  export type OrderRFQStruct = {
    info: PromiseOrValue<BigNumberish>;
    makerAsset: PromiseOrValue<string>;
    takerAsset: PromiseOrValue<string>;
    maker: PromiseOrValue<string>;
    allowedSender: PromiseOrValue<string>;
    makingAmount: PromiseOrValue<BigNumberish>;
    takingAmount: PromiseOrValue<BigNumberish>;
  };

  export type OrderRFQStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    info: BigNumber;
    makerAsset: string;
    takerAsset: string;
    maker: string;
    allowedSender: string;
    makingAmount: BigNumber;
    takingAmount: BigNumber;
  };
}

export interface OrderRFQMixinInterface extends utils.Interface {
  functions: {
    "cancelOrderRFQ(uint256)": FunctionFragment;
    "cancelOrderRFQ(uint256,uint256)": FunctionFragment;
    "fillOrderRFQ((uint256,address,address,address,address,uint256,uint256),bytes,uint256)": FunctionFragment;
    "fillOrderRFQCompact((uint256,address,address,address,address,uint256,uint256),bytes32,bytes32,uint256)": FunctionFragment;
    "fillOrderRFQTo((uint256,address,address,address,address,uint256,uint256),bytes,uint256,address)": FunctionFragment;
    "fillOrderRFQToWithPermit((uint256,address,address,address,address,uint256,uint256),bytes,uint256,address,bytes)": FunctionFragment;
    "invalidatorForOrderRFQ(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelOrderRFQ(uint256)"
      | "cancelOrderRFQ(uint256,uint256)"
      | "fillOrderRFQ"
      | "fillOrderRFQCompact"
      | "fillOrderRFQTo"
      | "fillOrderRFQToWithPermit"
      | "invalidatorForOrderRFQ"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelOrderRFQ(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrderRFQ(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderRFQ",
    values: [
      OrderRFQLib.OrderRFQStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderRFQCompact",
    values: [
      OrderRFQLib.OrderRFQStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderRFQTo",
    values: [
      OrderRFQLib.OrderRFQStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderRFQToWithPermit",
    values: [
      OrderRFQLib.OrderRFQStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidatorForOrderRFQ",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOrderRFQ(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrderRFQ(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderRFQ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderRFQCompact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderRFQTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderRFQToWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidatorForOrderRFQ",
    data: BytesLike
  ): Result;

  events: {
    "OrderFilledRFQ(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderFilledRFQ"): EventFragment;
}

export interface OrderFilledRFQEventObject {
  orderHash: string;
  makingAmount: BigNumber;
}
export type OrderFilledRFQEvent = TypedEvent<
  [string, BigNumber],
  OrderFilledRFQEventObject
>;

export type OrderFilledRFQEventFilter = TypedEventFilter<OrderFilledRFQEvent>;

export interface OrderRFQMixin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderRFQMixinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "cancelOrderRFQ(uint256)"(
      orderInfo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancelOrderRFQ(uint256,uint256)"(
      orderInfo: PromiseOrValue<BigNumberish>,
      additionalMask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillOrderRFQ(
      order: OrderRFQLib.OrderRFQStruct,
      signature: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillOrderRFQCompact(
      order: OrderRFQLib.OrderRFQStruct,
      r: PromiseOrValue<BytesLike>,
      vs: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillOrderRFQTo(
      order: OrderRFQLib.OrderRFQStruct,
      signature: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillOrderRFQToWithPermit(
      order: OrderRFQLib.OrderRFQStruct,
      signature: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      permit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    invalidatorForOrderRFQ(
      maker: PromiseOrValue<string>,
      slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  "cancelOrderRFQ(uint256)"(
    orderInfo: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancelOrderRFQ(uint256,uint256)"(
    orderInfo: PromiseOrValue<BigNumberish>,
    additionalMask: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillOrderRFQ(
    order: OrderRFQLib.OrderRFQStruct,
    signature: PromiseOrValue<BytesLike>,
    flagsAndAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillOrderRFQCompact(
    order: OrderRFQLib.OrderRFQStruct,
    r: PromiseOrValue<BytesLike>,
    vs: PromiseOrValue<BytesLike>,
    flagsAndAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillOrderRFQTo(
    order: OrderRFQLib.OrderRFQStruct,
    signature: PromiseOrValue<BytesLike>,
    flagsAndAmount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillOrderRFQToWithPermit(
    order: OrderRFQLib.OrderRFQStruct,
    signature: PromiseOrValue<BytesLike>,
    flagsAndAmount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    permit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  invalidatorForOrderRFQ(
    maker: PromiseOrValue<string>,
    slot: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    "cancelOrderRFQ(uint256)"(
      orderInfo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOrderRFQ(uint256,uint256)"(
      orderInfo: PromiseOrValue<BigNumberish>,
      additionalMask: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fillOrderRFQ(
      order: OrderRFQLib.OrderRFQStruct,
      signature: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    fillOrderRFQCompact(
      order: OrderRFQLib.OrderRFQStruct,
      r: PromiseOrValue<BytesLike>,
      vs: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        filledMakingAmount: BigNumber;
        filledTakingAmount: BigNumber;
        orderHash: string;
      }
    >;

    fillOrderRFQTo(
      order: OrderRFQLib.OrderRFQStruct,
      signature: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        filledMakingAmount: BigNumber;
        filledTakingAmount: BigNumber;
        orderHash: string;
      }
    >;

    fillOrderRFQToWithPermit(
      order: OrderRFQLib.OrderRFQStruct,
      signature: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      permit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    invalidatorForOrderRFQ(
      maker: PromiseOrValue<string>,
      slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OrderFilledRFQ(bytes32,uint256)"(
      orderHash?: null,
      makingAmount?: null
    ): OrderFilledRFQEventFilter;
    OrderFilledRFQ(
      orderHash?: null,
      makingAmount?: null
    ): OrderFilledRFQEventFilter;
  };

  estimateGas: {
    "cancelOrderRFQ(uint256)"(
      orderInfo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancelOrderRFQ(uint256,uint256)"(
      orderInfo: PromiseOrValue<BigNumberish>,
      additionalMask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillOrderRFQ(
      order: OrderRFQLib.OrderRFQStruct,
      signature: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillOrderRFQCompact(
      order: OrderRFQLib.OrderRFQStruct,
      r: PromiseOrValue<BytesLike>,
      vs: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillOrderRFQTo(
      order: OrderRFQLib.OrderRFQStruct,
      signature: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillOrderRFQToWithPermit(
      order: OrderRFQLib.OrderRFQStruct,
      signature: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      permit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    invalidatorForOrderRFQ(
      maker: PromiseOrValue<string>,
      slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "cancelOrderRFQ(uint256)"(
      orderInfo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancelOrderRFQ(uint256,uint256)"(
      orderInfo: PromiseOrValue<BigNumberish>,
      additionalMask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillOrderRFQ(
      order: OrderRFQLib.OrderRFQStruct,
      signature: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillOrderRFQCompact(
      order: OrderRFQLib.OrderRFQStruct,
      r: PromiseOrValue<BytesLike>,
      vs: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillOrderRFQTo(
      order: OrderRFQLib.OrderRFQStruct,
      signature: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillOrderRFQToWithPermit(
      order: OrderRFQLib.OrderRFQStruct,
      signature: PromiseOrValue<BytesLike>,
      flagsAndAmount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      permit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    invalidatorForOrderRFQ(
      maker: PromiseOrValue<string>,
      slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
