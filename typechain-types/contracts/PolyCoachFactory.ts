/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface PolyCoachFactoryInterface extends utils.Interface {
  functions: {
    "complete()": FunctionFragment;
    "createNewCoach(uint256,string,string)": FunctionFragment;
    "donate(address,address,uint256)": FunctionFragment;
    "donationRules(address)": FunctionFragment;
    "incentive()": FunctionFragment;
    "isValidDonate(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pcToken()": FunctionFragment;
    "polyCoachStatus(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDonationRules(address[],uint256[])": FunctionFragment;
    "setNewIncentive(address,address)": FunctionFragment;
    "supervise(address)": FunctionFragment;
    "totalCoach()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "complete"
      | "createNewCoach"
      | "donate"
      | "donationRules"
      | "incentive"
      | "isValidDonate"
      | "owner"
      | "pcToken"
      | "polyCoachStatus"
      | "renounceOwnership"
      | "setDonationRules"
      | "setNewIncentive"
      | "supervise"
      | "totalCoach"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "complete", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createNewCoach",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "donationRules",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "incentive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidDonate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "polyCoachStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDonationRules",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewIncentive",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supervise",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCoach",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "complete", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNewCoach",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donationRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "incentive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "polyCoachStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDonationRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supervise", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalCoach", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "NewCoach(address,uint256,address,uint256,string,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewCoach"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface NewCoachEventObject {
  owner: string;
  ownerFid: BigNumber;
  coach: string;
  totalCoachFund: BigNumber;
  trainingName: string;
  trainingDesc: string;
}
export type NewCoachEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, string],
  NewCoachEventObject
>;

export type NewCoachEventFilter = TypedEventFilter<NewCoachEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PolyCoachFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PolyCoachFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    complete(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNewCoach(
      _ownerFid: PromiseOrValue<BigNumberish>,
      _trainingName: PromiseOrValue<string>,
      _trainingDesc: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donate(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donationRules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    incentive(overrides?: CallOverrides): Promise<[string]>;

    isValidDonate(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pcToken(overrides?: CallOverrides): Promise<[string]>;

    polyCoachStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDonationRules(
      _donateTokens: PromiseOrValue<string>[],
      _minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNewIncentive(
      _pcToken: PromiseOrValue<string>,
      _incentive: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supervise(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalCoach(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  complete(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNewCoach(
    _ownerFid: PromiseOrValue<BigNumberish>,
    _trainingName: PromiseOrValue<string>,
    _trainingDesc: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donate(
    account: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donationRules(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  incentive(overrides?: CallOverrides): Promise<string>;

  isValidDonate(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pcToken(overrides?: CallOverrides): Promise<string>;

  polyCoachStatus(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDonationRules(
    _donateTokens: PromiseOrValue<string>[],
    _minAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNewIncentive(
    _pcToken: PromiseOrValue<string>,
    _incentive: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supervise(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalCoach(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    complete(overrides?: CallOverrides): Promise<void>;

    createNewCoach(
      _ownerFid: PromiseOrValue<BigNumberish>,
      _trainingName: PromiseOrValue<string>,
      _trainingDesc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    donate(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    donationRules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentive(overrides?: CallOverrides): Promise<string>;

    isValidDonate(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pcToken(overrides?: CallOverrides): Promise<string>;

    polyCoachStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDonationRules(
      _donateTokens: PromiseOrValue<string>[],
      _minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setNewIncentive(
      _pcToken: PromiseOrValue<string>,
      _incentive: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supervise(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCoach(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewCoach(address,uint256,address,uint256,string,string)"(
      owner?: null,
      ownerFid?: null,
      coach?: null,
      totalCoachFund?: null,
      trainingName?: null,
      trainingDesc?: null
    ): NewCoachEventFilter;
    NewCoach(
      owner?: null,
      ownerFid?: null,
      coach?: null,
      totalCoachFund?: null,
      trainingName?: null,
      trainingDesc?: null
    ): NewCoachEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    complete(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNewCoach(
      _ownerFid: PromiseOrValue<BigNumberish>,
      _trainingName: PromiseOrValue<string>,
      _trainingDesc: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donate(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donationRules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentive(overrides?: CallOverrides): Promise<BigNumber>;

    isValidDonate(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pcToken(overrides?: CallOverrides): Promise<BigNumber>;

    polyCoachStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDonationRules(
      _donateTokens: PromiseOrValue<string>[],
      _minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNewIncentive(
      _pcToken: PromiseOrValue<string>,
      _incentive: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supervise(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalCoach(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    complete(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNewCoach(
      _ownerFid: PromiseOrValue<BigNumberish>,
      _trainingName: PromiseOrValue<string>,
      _trainingDesc: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donate(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donationRules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidDonate(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    polyCoachStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDonationRules(
      _donateTokens: PromiseOrValue<string>[],
      _minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNewIncentive(
      _pcToken: PromiseOrValue<string>,
      _incentive: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supervise(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalCoach(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
