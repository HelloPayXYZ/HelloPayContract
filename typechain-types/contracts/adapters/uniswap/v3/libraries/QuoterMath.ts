/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace QuoterMath {
  export type QuoteParamsStruct = {
    zeroForOne: PromiseOrValue<boolean>;
    exactInput: PromiseOrValue<boolean>;
    fee: PromiseOrValue<BigNumberish>;
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
  };

  export type QuoteParamsStructOutput = [
    boolean,
    boolean,
    number,
    BigNumber
  ] & {
    zeroForOne: boolean;
    exactInput: boolean;
    fee: number;
    sqrtPriceLimitX96: BigNumber;
  };
}

export interface QuoterMathInterface extends utils.Interface {
  functions: {
    "quote(IUniswapV3Pool,int256,(bool,bool,uint24,uint160))": FunctionFragment;
    "quoteBatch(IUniswapV3Pool,int256[],(bool,bool,uint24,uint160))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "quote" | "quoteBatch"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "quote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      QuoterMath.QuoteParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      QuoterMath.QuoteParamsStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteBatch", data: BytesLike): Result;

  events: {};
}

export interface QuoterMath extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuoterMathInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    quote(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      quoteParams: QuoterMath.QuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        amount0: BigNumber;
        amount1: BigNumber;
        sqrtPriceAfterX96: BigNumber;
        initializedTicksCrossed: number;
      }
    >;

    quoteBatch(
      pool: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      quoteParams: QuoterMath.QuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], number[]] & {
        amounts0: BigNumber[];
        amounts1: BigNumber[];
        sqrtPricesAfterX96: BigNumber[];
        initializedTicksCrossedList: number[];
      }
    >;
  };

  quote(
    pool: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    quoteParams: QuoterMath.QuoteParamsStruct,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number] & {
      amount0: BigNumber;
      amount1: BigNumber;
      sqrtPriceAfterX96: BigNumber;
      initializedTicksCrossed: number;
    }
  >;

  quoteBatch(
    pool: PromiseOrValue<string>,
    amounts: PromiseOrValue<BigNumberish>[],
    quoteParams: QuoterMath.QuoteParamsStruct,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber[], number[]] & {
      amounts0: BigNumber[];
      amounts1: BigNumber[];
      sqrtPricesAfterX96: BigNumber[];
      initializedTicksCrossedList: number[];
    }
  >;

  callStatic: {
    quote(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      quoteParams: QuoterMath.QuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        amount0: BigNumber;
        amount1: BigNumber;
        sqrtPriceAfterX96: BigNumber;
        initializedTicksCrossed: number;
      }
    >;

    quoteBatch(
      pool: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      quoteParams: QuoterMath.QuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], number[]] & {
        amounts0: BigNumber[];
        amounts1: BigNumber[];
        sqrtPricesAfterX96: BigNumber[];
        initializedTicksCrossedList: number[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    quote(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      quoteParams: QuoterMath.QuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteBatch(
      pool: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      quoteParams: QuoterMath.QuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    quote(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      quoteParams: QuoterMath.QuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteBatch(
      pool: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      quoteParams: QuoterMath.QuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
