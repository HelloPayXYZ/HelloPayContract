/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface LybraAdapterInterface extends utils.Interface {
  functions: {
    "borrow(uint256)": FunctionFragment;
    "curveCalculator()": FunctionFragment;
    "curvePeUSDAndUSDCPool()": FunctionFragment;
    "depositAllAndMint(uint256)": FunctionFragment;
    "depositAndMint(uint256,uint256)": FunctionFragment;
    "getAssetPrice()": FunctionFragment;
    "getGlobalInfo(address,address)": FunctionFragment;
    "getPositionInfo(address)": FunctionFragment;
    "lybraConfigurator()": FunctionFragment;
    "lybraWstVault()": FunctionFragment;
    "payback(uint256)": FunctionFragment;
    "paybackAll()": FunctionFragment;
    "peUSD()": FunctionFragment;
    "quotePeUSDToWstETH(uint256,uint256)": FunctionFragment;
    "quoteUSDCToPeUSD(uint256,uint256)": FunctionFragment;
    "quoteWstETHToPeUSD(uint256,uint256)": FunctionFragment;
    "quoteWstETHToUSDC(uint256,uint256)": FunctionFragment;
    "swapPeUSDToWstETH(uint256)": FunctionFragment;
    "swapUSDCToPeUSD(uint256)": FunctionFragment;
    "swapWstETHToUSDC(uint256)": FunctionFragment;
    "uniswapV3Adapter()": FunctionFragment;
    "usdc()": FunctionFragment;
    "wETH()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "wstETH()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrow"
      | "curveCalculator"
      | "curvePeUSDAndUSDCPool"
      | "depositAllAndMint"
      | "depositAndMint"
      | "getAssetPrice"
      | "getGlobalInfo"
      | "getPositionInfo"
      | "lybraConfigurator"
      | "lybraWstVault"
      | "payback"
      | "paybackAll"
      | "peUSD"
      | "quotePeUSDToWstETH"
      | "quoteUSDCToPeUSD"
      | "quoteWstETHToPeUSD"
      | "quoteWstETHToUSDC"
      | "swapPeUSDToWstETH"
      | "swapUSDCToPeUSD"
      | "swapWstETHToUSDC"
      | "uniswapV3Adapter"
      | "usdc"
      | "wETH"
      | "withdraw"
      | "wstETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "curveCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curvePeUSDAndUSDCPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositAllAndMint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndMint",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lybraConfigurator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lybraWstVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payback",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "paybackAll",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "peUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quotePeUSDToWstETH",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteUSDCToPeUSD",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteWstETHToPeUSD",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteWstETHToUSDC",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPeUSDToWstETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapUSDCToPeUSD",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapWstETHToUSDC",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Adapter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(functionFragment: "wETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "wstETH", values?: undefined): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "curveCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curvePeUSDAndUSDCPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAllAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lybraConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lybraWstVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paybackAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quotePeUSDToWstETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteUSDCToPeUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteWstETHToPeUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteWstETHToUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPeUSDToWstETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapUSDCToPeUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapWstETHToUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Adapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wstETH", data: BytesLike): Result;

  events: {};
}

export interface LybraAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LybraAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    curveCalculator(overrides?: CallOverrides): Promise<[string]>;

    curvePeUSDAndUSDCPool(overrides?: CallOverrides): Promise<[string]>;

    depositAllAndMint(
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndMint(
      depositAmount: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAssetPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGlobalInfo(
      collateralToken: PromiseOrValue<string>,
      debtToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { supplyRate: BigNumber; borrowRate: BigNumber }
    >;

    getPositionInfo(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalCollateralBase: BigNumber;
        totalCollateralAmount: BigNumber;
        totalDebtBase: BigNumber;
        totalDebtAmount: BigNumber;
        availableBorrowsBase: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    lybraConfigurator(overrides?: CallOverrides): Promise<[string]>;

    lybraWstVault(overrides?: CallOverrides): Promise<[string]>;

    payback(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paybackAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    peUSD(overrides?: CallOverrides): Promise<[string]>;

    quotePeUSDToWstETH(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exactInputAmount: BigNumber;
        exactOutputAmount: BigNumber;
      }
    >;

    quoteUSDCToPeUSD(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exactInputAmount: BigNumber;
        exactOutputAmount: BigNumber;
      }
    >;

    quoteWstETHToPeUSD(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exactInputAmount: BigNumber;
        exactOutputAmount: BigNumber;
      }
    >;

    quoteWstETHToUSDC(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exactInputAmount: BigNumber;
        exactOutputAmount: BigNumber;
      }
    >;

    swapPeUSDToWstETH(
      peUSDAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapUSDCToPeUSD(
      usdcAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapWstETHToUSDC(
      wstETHAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3Adapter(overrides?: CallOverrides): Promise<[string]>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    wETH(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wstETH(overrides?: CallOverrides): Promise<[string]>;
  };

  borrow(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  curveCalculator(overrides?: CallOverrides): Promise<string>;

  curvePeUSDAndUSDCPool(overrides?: CallOverrides): Promise<string>;

  depositAllAndMint(
    mintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndMint(
    depositAmount: PromiseOrValue<BigNumberish>,
    mintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAssetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getGlobalInfo(
    collateralToken: PromiseOrValue<string>,
    debtToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { supplyRate: BigNumber; borrowRate: BigNumber }
  >;

  getPositionInfo(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalCollateralBase: BigNumber;
      totalCollateralAmount: BigNumber;
      totalDebtBase: BigNumber;
      totalDebtAmount: BigNumber;
      availableBorrowsBase: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
    }
  >;

  lybraConfigurator(overrides?: CallOverrides): Promise<string>;

  lybraWstVault(overrides?: CallOverrides): Promise<string>;

  payback(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paybackAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  peUSD(overrides?: CallOverrides): Promise<string>;

  quotePeUSDToWstETH(
    inputAmount: PromiseOrValue<BigNumberish>,
    outputAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      exactInputAmount: BigNumber;
      exactOutputAmount: BigNumber;
    }
  >;

  quoteUSDCToPeUSD(
    inputAmount: PromiseOrValue<BigNumberish>,
    outputAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      exactInputAmount: BigNumber;
      exactOutputAmount: BigNumber;
    }
  >;

  quoteWstETHToPeUSD(
    inputAmount: PromiseOrValue<BigNumberish>,
    outputAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      exactInputAmount: BigNumber;
      exactOutputAmount: BigNumber;
    }
  >;

  quoteWstETHToUSDC(
    inputAmount: PromiseOrValue<BigNumberish>,
    outputAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      exactInputAmount: BigNumber;
      exactOutputAmount: BigNumber;
    }
  >;

  swapPeUSDToWstETH(
    peUSDAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapUSDCToPeUSD(
    usdcAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapWstETHToUSDC(
    wstETHAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3Adapter(overrides?: CallOverrides): Promise<string>;

  usdc(overrides?: CallOverrides): Promise<string>;

  wETH(overrides?: CallOverrides): Promise<string>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wstETH(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    curveCalculator(overrides?: CallOverrides): Promise<string>;

    curvePeUSDAndUSDCPool(overrides?: CallOverrides): Promise<string>;

    depositAllAndMint(
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndMint(
      depositAmount: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalInfo(
      collateralToken: PromiseOrValue<string>,
      debtToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { supplyRate: BigNumber; borrowRate: BigNumber }
    >;

    getPositionInfo(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalCollateralBase: BigNumber;
        totalCollateralAmount: BigNumber;
        totalDebtBase: BigNumber;
        totalDebtAmount: BigNumber;
        availableBorrowsBase: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    lybraConfigurator(overrides?: CallOverrides): Promise<string>;

    lybraWstVault(overrides?: CallOverrides): Promise<string>;

    payback(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    paybackAll(overrides?: CallOverrides): Promise<void>;

    peUSD(overrides?: CallOverrides): Promise<string>;

    quotePeUSDToWstETH(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exactInputAmount: BigNumber;
        exactOutputAmount: BigNumber;
      }
    >;

    quoteUSDCToPeUSD(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exactInputAmount: BigNumber;
        exactOutputAmount: BigNumber;
      }
    >;

    quoteWstETHToPeUSD(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exactInputAmount: BigNumber;
        exactOutputAmount: BigNumber;
      }
    >;

    quoteWstETHToUSDC(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exactInputAmount: BigNumber;
        exactOutputAmount: BigNumber;
      }
    >;

    swapPeUSDToWstETH(
      peUSDAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapUSDCToPeUSD(
      usdcAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapWstETHToUSDC(
      wstETHAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapV3Adapter(overrides?: CallOverrides): Promise<string>;

    usdc(overrides?: CallOverrides): Promise<string>;

    wETH(overrides?: CallOverrides): Promise<string>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    wstETH(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    curveCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    curvePeUSDAndUSDCPool(overrides?: CallOverrides): Promise<BigNumber>;

    depositAllAndMint(
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndMint(
      depositAmount: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAssetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalInfo(
      collateralToken: PromiseOrValue<string>,
      debtToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionInfo(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lybraConfigurator(overrides?: CallOverrides): Promise<BigNumber>;

    lybraWstVault(overrides?: CallOverrides): Promise<BigNumber>;

    payback(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paybackAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    peUSD(overrides?: CallOverrides): Promise<BigNumber>;

    quotePeUSDToWstETH(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteUSDCToPeUSD(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteWstETHToPeUSD(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteWstETHToUSDC(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapPeUSDToWstETH(
      peUSDAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapUSDCToPeUSD(
      usdcAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapWstETHToUSDC(
      wstETHAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3Adapter(overrides?: CallOverrides): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    wETH(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wstETH(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    curveCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curvePeUSDAndUSDCPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositAllAndMint(
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndMint(
      depositAmount: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAssetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGlobalInfo(
      collateralToken: PromiseOrValue<string>,
      debtToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionInfo(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lybraConfigurator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lybraWstVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payback(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paybackAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    peUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quotePeUSDToWstETH(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteUSDCToPeUSD(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteWstETHToPeUSD(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteWstETHToUSDC(
      inputAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapPeUSDToWstETH(
      peUSDAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapUSDCToPeUSD(
      usdcAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapWstETHToUSDC(
      wstETHAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3Adapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wstETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
