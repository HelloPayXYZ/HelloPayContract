/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface HelloPayRedPackageFactoryInterface extends utils.Interface {
  functions: {
    "MAX_NUMBER()": FunctionFragment;
    "MIN_NUMBER()": FunctionFragment;
    "allowed_tokens(address)": FunctionFragment;
    "claimRedPackage(uint256,uint256)": FunctionFragment;
    "expiration_time()": FunctionFragment;
    "getBackExpiratedRedPackage(uint256)": FunctionFragment;
    "globalIndex()": FunctionFragment;
    "owner()": FunctionFragment;
    "redPackages(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendRedPackage(uint8,address,uint256,uint256,uint256,string)": FunctionFragment;
    "setAllowedTokens(address[],bool[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_NUMBER"
      | "MIN_NUMBER"
      | "allowed_tokens"
      | "claimRedPackage"
      | "expiration_time"
      | "getBackExpiratedRedPackage"
      | "globalIndex"
      | "owner"
      | "redPackages"
      | "renounceOwnership"
      | "sendRedPackage"
      | "setAllowedTokens"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_NUMBER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_NUMBER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowed_tokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRedPackage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "expiration_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBackExpiratedRedPackage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redPackages",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendRedPackage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedTokens",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_NUMBER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_NUMBER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowed_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRedPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expiration_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBackExpiratedRedPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redPackages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRedPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Claim(uint256,address,uint256,uint256,address)": EventFragment;
    "GetBack(uint256,address,uint256,uint256,address)": EventFragment;
    "NewRedPackage(uint256,uint8,address,uint256,uint256,uint256,address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetBack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRedPackage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ClaimEventObject {
  index: BigNumber;
  _token: string;
  _claimAmount: BigNumber;
  _fid: BigNumber;
  _account: string;
}
export type ClaimEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface GetBackEventObject {
  index: BigNumber;
  _token: string;
  _claimAmount: BigNumber;
  _fid: BigNumber;
  _account: string;
}
export type GetBackEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string],
  GetBackEventObject
>;

export type GetBackEventFilter = TypedEventFilter<GetBackEvent>;

export interface NewRedPackageEventObject {
  index: BigNumber;
  _redPackgeType: number;
  _token: string;
  _totalAmount: BigNumber;
  _totalNumber: BigNumber;
  _fid: BigNumber;
  _account: string;
  _memo: string;
}
export type NewRedPackageEvent = TypedEvent<
  [BigNumber, number, string, BigNumber, BigNumber, BigNumber, string, string],
  NewRedPackageEventObject
>;

export type NewRedPackageEventFilter = TypedEventFilter<NewRedPackageEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface HelloPayRedPackageFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HelloPayRedPackageFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_NUMBER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_NUMBER(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowed_tokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimRedPackage(
      _fid: PromiseOrValue<BigNumberish>,
      _targetIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expiration_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBackExpiratedRedPackage(
      _targetIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globalIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redPackages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        redPackageType: number;
        isNativeToken: boolean;
        token: string;
        totalAmount: BigNumber;
        remainAmount: BigNumber;
        totalNumber: BigNumber;
        remainNumber: BigNumber;
        starttime: BigNumber;
        fid: BigNumber;
        account: string;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendRedPackage(
      _redPackgeType: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _totalAmount: PromiseOrValue<BigNumberish>,
      _totalNumber: PromiseOrValue<BigNumberish>,
      _fid: PromiseOrValue<BigNumberish>,
      _memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowedTokens(
      _allowed_tokens: PromiseOrValue<string>[],
      _status: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

  allowed_tokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimRedPackage(
    _fid: PromiseOrValue<BigNumberish>,
    _targetIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expiration_time(overrides?: CallOverrides): Promise<BigNumber>;

  getBackExpiratedRedPackage(
    _targetIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globalIndex(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  redPackages(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      redPackageType: number;
      isNativeToken: boolean;
      token: string;
      totalAmount: BigNumber;
      remainAmount: BigNumber;
      totalNumber: BigNumber;
      remainNumber: BigNumber;
      starttime: BigNumber;
      fid: BigNumber;
      account: string;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendRedPackage(
    _redPackgeType: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _totalAmount: PromiseOrValue<BigNumberish>,
    _totalNumber: PromiseOrValue<BigNumberish>,
    _fid: PromiseOrValue<BigNumberish>,
    _memo: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowedTokens(
    _allowed_tokens: PromiseOrValue<string>[],
    _status: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

    allowed_tokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimRedPackage(
      _fid: PromiseOrValue<BigNumberish>,
      _targetIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    expiration_time(overrides?: CallOverrides): Promise<BigNumber>;

    getBackExpiratedRedPackage(
      _targetIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    globalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    redPackages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        redPackageType: number;
        isNativeToken: boolean;
        token: string;
        totalAmount: BigNumber;
        remainAmount: BigNumber;
        totalNumber: BigNumber;
        remainNumber: BigNumber;
        starttime: BigNumber;
        fid: BigNumber;
        account: string;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendRedPackage(
      _redPackgeType: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _totalAmount: PromiseOrValue<BigNumberish>,
      _totalNumber: PromiseOrValue<BigNumberish>,
      _fid: PromiseOrValue<BigNumberish>,
      _memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedTokens(
      _allowed_tokens: PromiseOrValue<string>[],
      _status: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Claim(uint256,address,uint256,uint256,address)"(
      index?: null,
      _token?: null,
      _claimAmount?: null,
      _fid?: null,
      _account?: null
    ): ClaimEventFilter;
    Claim(
      index?: null,
      _token?: null,
      _claimAmount?: null,
      _fid?: null,
      _account?: null
    ): ClaimEventFilter;

    "GetBack(uint256,address,uint256,uint256,address)"(
      index?: null,
      _token?: null,
      _claimAmount?: null,
      _fid?: null,
      _account?: null
    ): GetBackEventFilter;
    GetBack(
      index?: null,
      _token?: null,
      _claimAmount?: null,
      _fid?: null,
      _account?: null
    ): GetBackEventFilter;

    "NewRedPackage(uint256,uint8,address,uint256,uint256,uint256,address,string)"(
      index?: null,
      _redPackgeType?: null,
      _token?: null,
      _totalAmount?: null,
      _totalNumber?: null,
      _fid?: null,
      _account?: null,
      _memo?: null
    ): NewRedPackageEventFilter;
    NewRedPackage(
      index?: null,
      _redPackgeType?: null,
      _token?: null,
      _totalAmount?: null,
      _totalNumber?: null,
      _fid?: null,
      _account?: null,
      _memo?: null
    ): NewRedPackageEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    MAX_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

    allowed_tokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRedPackage(
      _fid: PromiseOrValue<BigNumberish>,
      _targetIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expiration_time(overrides?: CallOverrides): Promise<BigNumber>;

    getBackExpiratedRedPackage(
      _targetIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redPackages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendRedPackage(
      _redPackgeType: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _totalAmount: PromiseOrValue<BigNumberish>,
      _totalNumber: PromiseOrValue<BigNumberish>,
      _fid: PromiseOrValue<BigNumberish>,
      _memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowedTokens(
      _allowed_tokens: PromiseOrValue<string>[],
      _status: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_NUMBER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_NUMBER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowed_tokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRedPackage(
      _fid: PromiseOrValue<BigNumberish>,
      _targetIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expiration_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBackExpiratedRedPackage(
      _targetIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globalIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redPackages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendRedPackage(
      _redPackgeType: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _totalAmount: PromiseOrValue<BigNumberish>,
      _totalNumber: PromiseOrValue<BigNumberish>,
      _fid: PromiseOrValue<BigNumberish>,
      _memo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedTokens(
      _allowed_tokens: PromiseOrValue<string>[],
      _status: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
